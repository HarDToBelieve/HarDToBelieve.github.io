<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/bn.h' l='858' type='int BN_from_montgomery(BIGNUM * ret, const BIGNUM * a, const BN_MONT_CTX * mont, BN_CTX * ctx)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/bn.h' l='854'>// BN_from_montgomery sets |ret| equal to |a| * R^-1, i.e. translates values out
// of the Montgomery domain. |a| is assumed to be in the range [0, n*R), where
// |n| is the Montgomery modulus. Note n &lt; R, so inputs in the range [0, n*n)
// are valid. This function returns one on success or zero on error.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/exponentiation.c' l='711' u='c' c='BN_mod_exp_mont'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/exponentiation.c' l='1211' u='c' c='BN_mod_exp_mont_consttime'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/montgomery.c' l='343' ll='361' type='int BN_from_montgomery(BIGNUM * r, const BIGNUM * a, const BN_MONT_CTX * mont, BN_CTX * ctx)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/montgomery.c' l='380' u='c' c='bn_one_to_montgomery'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/rsa/blinding.c' l='231' u='c' c='bn_blinding_create_param'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/rsa/rsa_impl.c' l='832' u='c' c='mod_montgomery'/>
