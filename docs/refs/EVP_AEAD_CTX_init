<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/aead.h' l='267' type='int EVP_AEAD_CTX_init(EVP_AEAD_CTX * ctx, const EVP_AEAD * aead, const uint8_t * key, size_t key_len, size_t tag_len, ENGINE * impl)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/aead.h' l='258'>// EVP_AEAD_CTX_init initializes |ctx| for the given AEAD algorithm. The |impl|
// argument is ignored and should be NULL. Authentication tags may be truncated
// by passing a size as |tag_len|. A |tag_len| of zero indicates the default
// tag length and this is defined as EVP_AEAD_DEFAULT_TAG_LENGTH for
// readability.
//
// Returns 1 on success. Otherwise returns 0 and pushes to the error stack. In
// the error case, you do not need to call |EVP_AEAD_CTX_cleanup|, but it&apos;s
// harmless to do so.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/aead.c' l='45' u='c' c='EVP_AEAD_CTX_new'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/aead.c' l='58' ll='68' type='int EVP_AEAD_CTX_init(EVP_AEAD_CTX * ctx, const EVP_AEAD * aead, const uint8_t * key, size_t key_len, size_t tag_len, ENGINE * impl)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c' l='358' u='c' c='hpke_key_schedule'/>
