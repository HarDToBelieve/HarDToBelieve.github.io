<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/cipher.h' l='219' type='int EVP_Cipher(EVP_CIPHER_CTX * ctx, uint8_t * out, const uint8_t * in, size_t in_len)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/cipher.h' l='204'>// EVP_Cipher performs a one-shot encryption/decryption operation. No partial
// blocks are maintained between calls. However, any internal cipher state is
// still updated. For CBC-mode ciphers, the IV is updated to the final
// ciphertext block. For stream ciphers, the stream is advanced past the bytes
// used. It returns one on success and zero otherwise, unless |EVP_CIPHER_flags|
// has |EVP_CIPH_FLAG_CUSTOM_CIPHER| set. Then it returns the number of bytes
// written or -1 on error.
//
// WARNING: this differs from the usual return value convention when using
// |EVP_CIPH_FLAG_CUSTOM_CIPHER|.
//
// TODO(davidben): The normal ciphers currently never fail, even if, e.g.,
// |in_len| is not a multiple of the block size for CBC-mode decryption. The
// input just gets rounded up while the output gets truncated. This should
// either be officially documented or fail.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cmac/cmac.c' l='182' u='c' c='CMAC_Init'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cmac/cmac.c' l='232' u='c' c='CMAC_Update'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cmac/cmac.c' l='239' u='c' c='CMAC_Update'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cmac/cmac.c' l='277' u='c' c='CMAC_Final'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c' l='486' ll='489' type='int EVP_Cipher(EVP_CIPHER_CTX * ctx, uint8_t * out, const uint8_t * in, size_t in_len)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libsrtp/crypto/cipher/aes_gcm_ossl.c' l='276' u='c' c='srtp_aes_gcm_openssl_set_aad'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libsrtp/crypto/cipher/aes_gcm_ossl.c' l='304' u='c' c='srtp_aes_gcm_openssl_encrypt'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libsrtp/crypto/cipher/aes_gcm_ossl.c' l='328' u='c' c='srtp_aes_gcm_openssl_get_tag'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libsrtp/crypto/cipher/aes_gcm_ossl.c' l='369' u='c' c='srtp_aes_gcm_openssl_decrypt'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libsrtp/crypto/cipher/aes_gcm_ossl.c' l='374' u='c' c='srtp_aes_gcm_openssl_decrypt'/>
