<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/libyasm/inttree.h' l='67' type='void IT_enumerate(IntervalTree * , long low, long high, void * cbd, void (*)(IntervalTreeNode *, void *) callback)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/libyasm/inttree.c' l='789' ll='838' type='void IT_enumerate(IntervalTree * it, long low, long high, void * cbd, void (*)(IntervalTreeNode *, void *) callback)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/libyasm/inttree.c' l='779'>/* The basic idea for the function below is to take the IntervalSearch
 * function from the book and modify to find all overlapping intervals
 * instead of just one.  This means that any time we take the left
 * branch down the tree we must also check the right branch if and only if
 * we find an overlapping interval in that left branch.  Note this is a
 * recursive condition because if we go left at the root then go left
 * again at the first left child and find an overlap in the left subtree
 * of the left child of root we must recursively check the right subtree
 * of the left child of root as well as the right child of root.
 */</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/libyasm/section.c' l='1469' u='c' c='yasm_object_optimize'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/libyasm/section.c' l='1537' u='c' c='yasm_object_optimize'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/libyasm/section.c' l='1565' u='c' c='yasm_object_optimize'/>
