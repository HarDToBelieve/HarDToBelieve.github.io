<dec f='webkit/Source/JavaScriptCore/b3/B3Opcode.h' l='210' type='64'/>
<use f='webkit/Source/JavaScriptCore/b3/B3Opcode.h' l='477' c='_ZN3JSC2B36isAtomENS0_6OpcodeE'/>
<use f='webkit/Source/JavaScriptCore/b3/B3Opcode.h' l='494' c='_ZN3JSC2B311isAtomicCASENS0_6OpcodeE'/>
<use f='webkit/Source/JavaScriptCore/b3/B3Kind.h' l='129' c='_ZNK3JSC2B34Kind8hasTrapsEv'/>
<use f='webkit/Source/JavaScriptCore/b3/B3Value.h' l='469' c='_ZN3JSC2B35Value18adjacencyListSpaceENS0_4KindE'/>
<doc f='webkit/Source/JavaScriptCore/b3/B3Opcode.h' l='173'>// Atomic compare and swap that returns a boolean. May choose to do nothing and return false. You can
    // usually assume that this is faster and results in less code than AtomicStrongCAS, though that&apos;s
    // not necessarily true on Intel, if instruction selection does its job. Imagine that this opcode is
    // as if you did this atomically:
    //
    // template&lt;typename T&gt;
    // bool AtomicWeakCAS(T expectedValue, T newValue, T* ptr)
    // {
    //     if (!rand())
    //         return false; // Real world example of this: context switch on ARM while doing CAS.
    //     if (*ptr != expectedValue)
    //         return false;
    //     *ptr = newValue;
    //     return true;
    // }
    //
    // Note that all atomics put the pointer last to be consistent with how loads and stores work. This
    // is a goofy tradition, but it&apos;s harmless, and better than being inconsistent.
    //
    // Note that weak CAS has no fencing guarantees when it fails. This means that the following
    // transformation is always valid:
    //
    // Before:
    //
    //         Branch(AtomicWeakCAS(expected, new, ptr))
    //       Successors: Then:#success, Else:#fail
    //
    // After:
    //
    //         Branch(Equal(Load(ptr), expected))
    //       Successors: Then:#attempt, Else:#fail
    //     BB#attempt:
    //         Branch(AtomicWeakCAS(expected, new, ptr))
    //       Successors: Then:#success, Else:#fail
    //
    // Both kinds of CAS for non-canonical widths (Width8 and Width16) ignore the irrelevant bits of the
    // input.</doc>
<use f='webkit/Source/JavaScriptCore/b3/B3ValueInlines.h' l='157' c='_ZNK3JSC2B35Value19adjacencyListOffsetEv'/>
<use f='webkit/Source/JavaScriptCore/b3/B3ValueInlines.h' l='157' c='_ZNK3JSC2B35Value9cloneImplEv'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_8.cpp' l='67' u='r' c='_Z17testAtomicWeakCASv'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_8.cpp' l='98' u='r' c='_Z17testAtomicWeakCASv'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_8.cpp' l='126' u='r' c='_Z17testAtomicWeakCASv'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_8.cpp' l='167' u='r' c='_Z17testAtomicWeakCASv'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_8.cpp' l='203' u='r' c='_Z17testAtomicWeakCASv'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_8.cpp' l='231' u='r' c='_Z17testAtomicWeakCASv'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_8.cpp' l='258' u='r' c='_Z17testAtomicWeakCASv'/>
