<use f='webkit/WebKitBuild/Debug/WebCore.framework/Versions/A/PrivateHeaders/npruntime.h' l='82'/>
<def f='webkit/WebKitBuild/Debug/WebCore.framework/Versions/A/PrivateHeaders/npruntime.h' l='295' ll='310'/>
<size>104</size>
<doc f='webkit/WebKitBuild/Debug/WebCore.framework/Versions/A/PrivateHeaders/npruntime.h' l='272'>/*
    NPObjects returned by create, retain, invoke, and getProperty pass
    a reference count to the caller.  That is, the callee adds a
    reference count which passes to the caller.  It is the caller&apos;s
    responsibility to release the returned object.

    NPInvokeFunctionPtr function may return 0 to indicate a void
    result.

    NPInvalidateFunctionPtr is called by the scripting environment
    when the native code is shutdown.  Any attempt to message a
    NPObject instance after the invalidate callback has been
    called will result in undefined behavior, even if the native code
    is still retaining those NPObject instances.  (The runtime
    will typically return immediately, with 0 or NULL, from an attempt
    to dispatch to a NPObject, but this behavior should not be
    depended upon.)

    The NPEnumerationFunctionPtr function may pass an array of
    NPIdentifiers back to the caller. The callee allocs the memory of
    the array using NPN_MemAlloc(), and it&apos;s the caller&apos;s responsibility
    to release it using NPN_MemFree().
*/</doc>
<mbr r='NPClass::structVersion' o='0' t='uint32_t'/>
<mbr r='NPClass::allocate' o='64' t='NPAllocateFunctionPtr'/>
<mbr r='NPClass::deallocate' o='128' t='NPDeallocateFunctionPtr'/>
<mbr r='NPClass::invalidate' o='192' t='NPInvalidateFunctionPtr'/>
<mbr r='NPClass::hasMethod' o='256' t='NPHasMethodFunctionPtr'/>
<mbr r='NPClass::invoke' o='320' t='NPInvokeFunctionPtr'/>
<mbr r='NPClass::invokeDefault' o='384' t='NPInvokeDefaultFunctionPtr'/>
<mbr r='NPClass::hasProperty' o='448' t='NPHasPropertyFunctionPtr'/>
<mbr r='NPClass::getProperty' o='512' t='NPGetPropertyFunctionPtr'/>
<mbr r='NPClass::setProperty' o='576' t='NPSetPropertyFunctionPtr'/>
<mbr r='NPClass::removeProperty' o='640' t='NPRemovePropertyFunctionPtr'/>
<mbr r='NPClass::enumerate' o='704' t='NPEnumerationFunctionPtr'/>
<mbr r='NPClass::construct' o='768' t='NPConstructFunctionPtr'/>
<use f='webkit/WebKitBuild/Debug/WebKitLegacy.framework/Versions/A/PrivateHeaders/npruntime.h' l='82'/>
<def f='webkit/WebKitBuild/Debug/WebKitLegacy.framework/Versions/A/PrivateHeaders/npruntime.h' l='295' ll='310'/>
<size>104</size>
<doc f='webkit/WebKitBuild/Debug/WebKitLegacy.framework/Versions/A/PrivateHeaders/npruntime.h' l='272'>/*
    NPObjects returned by create, retain, invoke, and getProperty pass
    a reference count to the caller.  That is, the callee adds a
    reference count which passes to the caller.  It is the caller&apos;s
    responsibility to release the returned object.

    NPInvokeFunctionPtr function may return 0 to indicate a void
    result.

    NPInvalidateFunctionPtr is called by the scripting environment
    when the native code is shutdown.  Any attempt to message a
    NPObject instance after the invalidate callback has been
    called will result in undefined behavior, even if the native code
    is still retaining those NPObject instances.  (The runtime
    will typically return immediately, with 0 or NULL, from an attempt
    to dispatch to a NPObject, but this behavior should not be
    depended upon.)

    The NPEnumerationFunctionPtr function may pass an array of
    NPIdentifiers back to the caller. The callee allocs the memory of
    the array using NPN_MemAlloc(), and it&apos;s the caller&apos;s responsibility
    to release it using NPN_MemFree().
*/</doc>
<mbr r='NPClass::structVersion' o='0' t='uint32_t'/>
<mbr r='NPClass::allocate' o='64' t='NPAllocateFunctionPtr'/>
<mbr r='NPClass::deallocate' o='128' t='NPDeallocateFunctionPtr'/>
<mbr r='NPClass::invalidate' o='192' t='NPInvalidateFunctionPtr'/>
<mbr r='NPClass::hasMethod' o='256' t='NPHasMethodFunctionPtr'/>
<mbr r='NPClass::invoke' o='320' t='NPInvokeFunctionPtr'/>
<mbr r='NPClass::invokeDefault' o='384' t='NPInvokeDefaultFunctionPtr'/>
<mbr r='NPClass::hasProperty' o='448' t='NPHasPropertyFunctionPtr'/>
<mbr r='NPClass::getProperty' o='512' t='NPGetPropertyFunctionPtr'/>
<mbr r='NPClass::setProperty' o='576' t='NPSetPropertyFunctionPtr'/>
<mbr r='NPClass::removeProperty' o='640' t='NPRemovePropertyFunctionPtr'/>
<mbr r='NPClass::enumerate' o='704' t='NPEnumerationFunctionPtr'/>
<mbr r='NPClass::construct' o='768' t='NPConstructFunctionPtr'/>
<use f='webkit/Source/WebCore/plugins/npruntime.h' l='82'/>
<def f='webkit/Source/WebCore/plugins/npruntime.h' l='295' ll='310'/>
<size>104</size>
<doc f='webkit/Source/WebCore/plugins/npruntime.h' l='272'>/*
    NPObjects returned by create, retain, invoke, and getProperty pass
    a reference count to the caller.  That is, the callee adds a
    reference count which passes to the caller.  It is the caller&apos;s
    responsibility to release the returned object.

    NPInvokeFunctionPtr function may return 0 to indicate a void
    result.

    NPInvalidateFunctionPtr is called by the scripting environment
    when the native code is shutdown.  Any attempt to message a
    NPObject instance after the invalidate callback has been
    called will result in undefined behavior, even if the native code
    is still retaining those NPObject instances.  (The runtime
    will typically return immediately, with 0 or NULL, from an attempt
    to dispatch to a NPObject, but this behavior should not be
    depended upon.)

    The NPEnumerationFunctionPtr function may pass an array of
    NPIdentifiers back to the caller. The callee allocs the memory of
    the array using NPN_MemAlloc(), and it&apos;s the caller&apos;s responsibility
    to release it using NPN_MemFree().
*/</doc>
<mbr r='NPClass::structVersion' o='0' t='uint32_t'/>
<mbr r='NPClass::allocate' o='64' t='NPAllocateFunctionPtr'/>
<mbr r='NPClass::deallocate' o='128' t='NPDeallocateFunctionPtr'/>
<mbr r='NPClass::invalidate' o='192' t='NPInvalidateFunctionPtr'/>
<mbr r='NPClass::hasMethod' o='256' t='NPHasMethodFunctionPtr'/>
<mbr r='NPClass::invoke' o='320' t='NPInvokeFunctionPtr'/>
<mbr r='NPClass::invokeDefault' o='384' t='NPInvokeDefaultFunctionPtr'/>
<mbr r='NPClass::hasProperty' o='448' t='NPHasPropertyFunctionPtr'/>
<mbr r='NPClass::getProperty' o='512' t='NPGetPropertyFunctionPtr'/>
<mbr r='NPClass::setProperty' o='576' t='NPSetPropertyFunctionPtr'/>
<mbr r='NPClass::removeProperty' o='640' t='NPRemovePropertyFunctionPtr'/>
<mbr r='NPClass::enumerate' o='704' t='NPEnumerationFunctionPtr'/>
<mbr r='NPClass::construct' o='768' t='NPConstructFunctionPtr'/>
