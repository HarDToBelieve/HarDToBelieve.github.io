<inh f='webkit/Source/WebCore/Modules/webgpu/WHLSL/WHLSLVisitor.h' l='106' c='WebCore::WHLSL::Visitor'/>
<def f='webkit/Source/WebCore/Modules/webgpu/WHLSL/WHLSLPreserveVariableLifetimes.cpp' l='58' ll='102'/>
<use f='webkit/Source/WebCore/Modules/webgpu/WHLSL/WHLSLPreserveVariableLifetimes.cpp' l='262' c='_ZN7WebCore5WHLSL25preserveVariableLifetimesERNS0_7ProgramE'/>
<size>72</size>
<doc f='webkit/Source/WebCore/Modules/webgpu/WHLSL/WHLSLPreserveVariableLifetimes.cpp' l='42'>// This pass works by ensuring proper variable lifetimes. In WHLSL, each variable
// has global lifetime. So returning a pointer to a local variable is a totally
// legitimate and well-specified thing to do.
//
// We implement this by:
// - We note every variable whose address we take.
// - Each such variable gets defined as a field in a struct.
// - Each function which is an entry point defines this struct.
// - Each non entry point takes a pointer to this struct as its final parameter.
// - Each call to a non-native function is rewritten to pass a pointer to the
//   struct as the last call argument.
// - Each variable reference to &quot;x&quot;, where &quot;x&quot; ends up in the struct, is
//   modified to instead be &quot;struct-&gt;x&quot;. We store to &quot;struct-&gt;x&quot; after declaring
//   &quot;x&quot;. If &quot;x&quot; is a function parameter, we store to &quot;struct-&gt;x&quot; as the first
//   thing we do in the function body.</doc>
<fun r='_ZN7WebCore5WHLSL24EscapedVariableCollector17escapeVariableUseERNS0_3AST10ExpressionE'/>
<fun r='_ZN7WebCore5WHLSL24EscapedVariableCollector5visitERNS0_3AST21MakePointerExpressionE'/>
<fun r='_ZN7WebCore5WHLSL24EscapedVariableCollector5visitERNS0_3AST28MakeArrayReferenceExpressionE'/>
<fun r='_ZN7WebCore5WHLSL24EscapedVariableCollector5visitERNS0_3AST18FunctionDefinitionE'/>
<fun r='_ZN7WebCore5WHLSL24EscapedVariableCollector20takeEscapedVariablesEv'/>
<mbr r='WebCore::WHLSL::EscapedVariableCollector::m_count' o='320' t='size_t'/>
<mbr r='WebCore::WHLSL::EscapedVariableCollector::m_escapedVariables' o='384' t='HashMap&lt;AST::VariableDeclaration *, WTF::String&gt;'/>
