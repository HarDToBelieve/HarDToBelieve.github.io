<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/isac/main/source/lpc_analysis.h' l='32' type='void WebRtcIsac_GetLpcGain(double signal_noise_ratio, const double * filtCoeffVecs, int numVecs, double * gain, double (*)[5] corrLo, const double * varscale)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/isac/main/source/encode.c' l='728' u='c' c='WebRtcIsac_EncodeUb16'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/isac/main/source/encode.c' l='917' u='c' c='WebRtcIsac_EncodeUb12'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/isac/main/source/lpc_analysis.c' l='447' ll='496' type='void WebRtcIsac_GetLpcGain(double signal_noise_ratio, const double * filtCoeffVecs, int numVecs, double * gain, double (*)[5] corrMat, const double * varscale)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/isac/main/source/lpc_analysis.c' l='428'>/******************************************************************************
 * WebRtcIsac_GetLpcGain()
 *
 * Compute the LPC gains for each sub-frame, given the LPC of each sub-frame
 * and the corresponding correlation coefficients.
 *
 * Inputs:
 *       -signal_noise_ratio : the desired SNR in dB.
 *       -numVecs            : number of sub-frames
 *       -corrMat             : a matrix of correlation coefficients where
 *                             each row is a set of correlation coefficients of
 *                             one sub-frame.
 *       -varscale           : a scale computed when WebRtcIsac_GetLpcCoefUb()
 *                             is called.
 *
 * Outputs:
 *       -gain               : pointer to a buffer where LP gains are written.
 *
 */</doc>
