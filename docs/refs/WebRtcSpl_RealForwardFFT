<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/signal_processing/include/real_fft.h' l='60' type='int WebRtcSpl_RealForwardFFT(struct RealFFT * self, const int16_t * real_data_in, int16_t * complex_data_out)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/signal_processing/real_fft.c' l='47' ll='72' type='int WebRtcSpl_RealForwardFFT(struct RealFFT * self, const int16_t * real_data_in, int16_t * complex_data_out)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/signal_processing/real_fft.c' l='43'>// The C version FFT functions (i.e. WebRtcSpl_RealForwardFFT and
// WebRtcSpl_RealInverseFFT) are real-valued FFT wrappers for complex-valued
// FFT implementation in SPL.</doc>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/signal_processing/include/real_fft.h' l='29'>// Compute an FFT for a real-valued signal of length of 2^order,
// where 1 &lt; order &lt;= MAX_FFT_ORDER. Transform length is determined by the
// specification structure, which must be initialized prior to calling the FFT
// function with WebRtcSpl_CreateRealFFT().
// The relationship between the input and output sequences can
// be expressed in terms of the DFT, i.e.:
//     x[n] = (2^(-scalefactor)/N)  . SUM[k=0,...,N-1] X[k].e^(jnk.2.pi/N)
//     n=0,1,2,...N-1
//     N=2^order.
// The conjugate-symmetric output sequence is represented using a CCS vector,
// which is of length N+2, and is organized as follows:
//     Index:      0  1  2  3  4  5   . . .   N-2       N-1       N       N+1
//     Component:  R0 0  R1 I1 R2 I2  . . .   R[N/2-1]  I[N/2-1]  R[N/2]  0
// where R[n] and I[n], respectively, denote the real and imaginary components
// for FFT bin &apos;n&apos;. Bins  are numbered from 0 to N/2, where N is the FFT length.
// Bin index 0 corresponds to the DC component, and bin index N/2 corresponds to
// the foldover frequency.
//
// Input Arguments:
//   self - pointer to preallocated and initialized FFT specification structure.
//   real_data_in - the input signal. For an ARM Neon platform, it must be
//                  aligned on a 32-byte boundary.
//
// Output Arguments:
//   complex_data_out - the output complex signal with (2^order + 2) 16-bit
//                      elements. For an ARM Neon platform, it must be different
//                      from real_data_in, and aligned on a 32-byte boundary.
//
// Return Value:
//   0  - FFT calculation is successful.
//   -1 - Error with bad arguments (null pointers).</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aecm/aecm_core_c.cc' l='194' u='c' c='_ZN6webrtc12_GLOBAL__N_112WindowAndFFTEPNS_8AecmCoreEPsPKsPNS_12ComplexInt16Ei'/>
