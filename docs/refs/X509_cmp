<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/x509.h' l='1427' type='int X509_cmp(const X509 * a, const X509 * b)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/x509_cmp.c' l='155' ll='180' type='int X509_cmp(const X509 * a, const X509 * b)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/x509_cmp.c' l='147'>/*
 * Compare two certificates: they must be identical for this to work. NB:
 * Although &quot;cmp&quot; operations are generally prototyped to take &quot;const&quot;
 * arguments (eg. for use in STACKs), the way X509 handling is - these
 * operations may involve ensuring the hashes are up-to-date and ensuring
 * certain cert information is cached. So this is the point where the
 * &quot;depth-first&quot; constification tree has to halt with an evil cast.
 */</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/x509_lu.c' l='620' u='c' c='X509_OBJECT_retrieve_match'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/x509_vfy.c' l='175' u='c' c='lookup_cert_match'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/x509_vfy.c' l='350' u='c' c='X509_verify_cert'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/x509_vfy.c' l='1422' u='c' c='check_crl_chain'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_certificate.cc' l='271' u='c' c='_ZNK3rtc18OpenSSLCertificateeqERKS0_'/>
