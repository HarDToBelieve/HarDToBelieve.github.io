<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/options.h' l='103'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/config.h' l='590' u='a'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/config.h' l='592' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/config.h' l='593' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/config.h' l='595' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/config.h' l='596' u='c'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/options.h' l='76'>// -----------------------------------------------------------------------------
// Type Compatibility Options
// -----------------------------------------------------------------------------
//
// ABSL_OPTION_USE_STD_ANY
//
// This option controls whether absl::any is implemented as an alias to
// std::any, or as an independent implementation.
//
// A value of 0 means to use Abseil&apos;s implementation.  This requires only C++11
// support, and is expected to work on every toolchain we support.
//
// A value of 1 means to use an alias to std::any.  This requires that all code
// using Abseil is built in C++17 mode or later.
//
// A value of 2 means to detect the C++ version being used to compile Abseil,
// and use an alias only if a working std::any is available.  This option is
// useful when you are building your entire program, including all of its
// dependencies, from source.  It should not be used otherwise -- for example,
// if you are distributing Abseil in a binary package manager -- since in
// mode 2, absl::any will name a different type, with a different mangled name
// and binary layout, depending on the compiler flags passed by the end user.
// For more info, see https://abseil.io/about/design/dropin-types.
//
// User code should not inspect this macro.  To check in the preprocessor if
// absl::any is a typedef of std::any, use the feature macro ABSL_USES_STD_ANY.</doc>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/absl/base/options.h' l='103'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/absl/base/config.h' l='590' u='a'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/absl/base/config.h' l='592' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/absl/base/config.h' l='593' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/absl/base/config.h' l='595' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/absl/base/config.h' l='596' u='c'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/absl/base/options.h' l='76'>// -----------------------------------------------------------------------------
// Type Compatibility Options
// -----------------------------------------------------------------------------
//
// ABSL_OPTION_USE_STD_ANY
//
// This option controls whether absl::any is implemented as an alias to
// std::any, or as an independent implementation.
//
// A value of 0 means to use Abseil&apos;s implementation.  This requires only C++11
// support, and is expected to work on every toolchain we support.
//
// A value of 1 means to use an alias to std::any.  This requires that all code
// using Abseil is built in C++17 mode or later.
//
// A value of 2 means to detect the C++ version being used to compile Abseil,
// and use an alias only if a working std::any is available.  This option is
// useful when you are building your entire program, including all of its
// dependencies, from source.  It should not be used otherwise -- for example,
// if you are distributing Abseil in a binary package manager -- since in
// mode 2, absl::any will name a different type, with a different mangled name
// and binary layout, depending on the compiler flags passed by the end user.
// For more info, see https://abseil.io/about/design/dropin-types.
//
// User code should not inspect this macro.  To check in the preprocessor if
// absl::any is a typedef of std::any, use the feature macro ABSL_USES_STD_ANY.</doc>
