<dec f='webkit/Source/ThirdParty/ANGLE/src/libANGLE/renderer/metal/FrameBufferMtl.h' l='186' type='angle::Result rx::FramebufferMtl::getReadableViewForRenderTarget(const gl::Context * context, const rx::RenderTargetMtl &amp; rtt, const gl::Rectangle &amp; readArea, mtl::TextureRef * readableDepthView, mtl::TextureRef * readableStencilView, uint32_t * readableViewLevel, uint32_t * readableViewLayer, gl::Rectangle * readableViewArea)'/>
<doc f='webkit/Source/ThirdParty/ANGLE/src/libANGLE/renderer/metal/FrameBufferMtl.h' l='178'>// This function either returns the render target&apos;s texture itself if the texture is readable
    // or create a copy of that texture that is readable if not. This function is typically used
    // for packed depth stencil where reading stencil requires a stencil view. However if a texture
    // has both render target, pixel format view &amp; shader readable usage flags, there will be
    // some glitches happen in Metal framework.
    // So the solution is creating a depth stencil texture without pixel format view flag but has
    // render target flag, then during blitting process, this texture is copied to another
    // intermidiate texture having pixel format view flag, but not render target flag.</doc>
<def f='webkit/Source/ThirdParty/ANGLE/src/libANGLE/renderer/metal/FrameBufferMtl.mm' l='848' ll='932' type='angle::Result rx::FramebufferMtl::getReadableViewForRenderTarget(const gl::Context * context, const rx::RenderTargetMtl &amp; rtt, const gl::Rectangle &amp; readArea, mtl::TextureRef * readableDepthViewOut, mtl::TextureRef * readableStencilViewOut, uint32_t * readableViewLevel, uint32_t * readableViewLayer, gl::Rectangle * readableViewArea)'/>
