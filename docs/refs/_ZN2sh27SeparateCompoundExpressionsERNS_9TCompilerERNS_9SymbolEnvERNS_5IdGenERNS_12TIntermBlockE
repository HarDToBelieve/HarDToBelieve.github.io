<dec f='webkit/Source/ThirdParty/ANGLE/src/compiler/translator/TranslatorMetalDirect/SeparateCompoundExpressions.h' l='40' type='bool sh::SeparateCompoundExpressions(sh::TCompiler &amp; compiler, sh::SymbolEnv &amp; symbolEnv, sh::IdGen &amp; idGen, sh::TIntermBlock &amp; root)'/>
<use f='webkit/Source/ThirdParty/ANGLE/src/compiler/translator/TranslatorMetalDirect.cpp' l='1429' u='c' c='_ZN2sh21TranslatorMetalDirect13translateImplERNS_12TIntermBlockEy'/>
<doc f='webkit/Source/ThirdParty/ANGLE/src/compiler/translator/TranslatorMetalDirect/SeparateCompoundExpressions.h' l='18'>// Transforms code to (usually) have most one non-terminal expression per statement.
// This also rewrites (&amp;&amp;), (||), and (?:) into raw if/if-not/if-else statements, respectively.
//
// e.g.
//    int x = 6 + foo(y, bar());
// becomes
//    auto _1 = bar();
//    auto _2 = foo(y, _1);
//    auto _3 = 6 + _2;
//    int x = _3;
//
// WARNING:
//    - This does not rewrite object indexing operators as a whole (e.g. foo.x, foo[x]), but will
//      rewrite the arguments to the operator (when applicable).
//      e.g.
//        foo(getVec()[i + 2] + 1);
//      becomes
//        auto _1 = getVec();
//        auto _2 = i + 2;
//        auto _3 = _1[_2] + 1; // Index operator remains in (+) expr here.
//        foo(_3);
//</doc>
<def f='webkit/Source/ThirdParty/ANGLE/src/compiler/translator/TranslatorMetalDirect/SeparateCompoundExpressions.cpp' l='629' ll='655' type='bool sh::SeparateCompoundExpressions(sh::TCompiler &amp; compiler, sh::SymbolEnv &amp; symbolEnv, sh::IdGen &amp; idGen, sh::TIntermBlock &amp; root)'/>
<doc f='webkit/Source/ThirdParty/ANGLE/src/compiler/translator/TranslatorMetalDirect/SeparateCompoundExpressions.cpp' l='627'>////////////////////////////////////////////////////////////////////////////////</doc>
