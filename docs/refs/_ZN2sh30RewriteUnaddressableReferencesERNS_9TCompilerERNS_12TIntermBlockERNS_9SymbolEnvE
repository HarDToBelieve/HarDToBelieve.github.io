<dec f='webkit/Source/ThirdParty/ANGLE/src/compiler/translator/TranslatorMetalDirect/RewriteUnaddressableReferences.h' l='25' type='bool sh::RewriteUnaddressableReferences(sh::TCompiler &amp; compiler, sh::TIntermBlock &amp; root, sh::SymbolEnv &amp; symbolEnv)'/>
<use f='webkit/Source/ThirdParty/ANGLE/src/compiler/translator/TranslatorMetalDirect.cpp' l='1439' u='c' c='_ZN2sh21TranslatorMetalDirect13translateImplERNS_12TIntermBlockEy'/>
<doc f='webkit/Source/ThirdParty/ANGLE/src/compiler/translator/TranslatorMetalDirect/RewriteUnaddressableReferences.h' l='17'>// Given:
//   void foo(out x);
// It is possible for the following to be legal in GLSL but not in Metal:
//   foo(expression);
// This can happen in cases where `expression` is a vector swizzle or vector element access.
// This rewrite functionality introduces temporaries that serve as proxies to be passed to the
// out/inout parameters as needed. The corresponding expressions get populated with their
// proxies after the function call.</doc>
<def f='webkit/Source/ThirdParty/ANGLE/src/compiler/translator/TranslatorMetalDirect/RewriteUnaddressableReferences.cpp' l='363' ll='376' type='bool sh::RewriteUnaddressableReferences(sh::TCompiler &amp; compiler, sh::TIntermBlock &amp; root, sh::SymbolEnv &amp; symbolEnv)'/>
