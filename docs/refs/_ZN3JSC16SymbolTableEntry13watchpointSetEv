<use f='webkit/Source/JavaScriptCore/runtime/SymbolTable.h' l='289' u='c' c='_ZN3JSC16SymbolTableEntry15disableWatchingERNS_2VME'/>
<def f='webkit/Source/JavaScriptCore/runtime/SymbolTable.h' l='318' ll='323' type='JSC::WatchpointSet * JSC::SymbolTableEntry::watchpointSet()'/>
<use f='webkit/Source/JavaScriptCore/runtime/JSSymbolTableObject.h' l='174' u='c' c='_ZN3JSC14symbolTablePutEPT0_PNS_14JSGlobalObjectENS_12PropertyNameENS_7JSValueEbbRb'/>
<doc f='webkit/Source/JavaScriptCore/runtime/SymbolTable.h' l='297'>// This watchpoint set is initialized clear, and goes through the following state transitions:
    // 
    // First write to this var, in any scope that has this symbol table: Clear-&gt;IsWatched.
    //
    // Second write to this var, in any scope that has this symbol table: IsWatched-&gt;IsInvalidated.
    //
    // We ensure that we touch the set (i.e. trigger its state transition) after we do the write. This
    // means that if you&apos;re in the compiler thread, and you:
    //
    // 1) Observe that the set IsWatched and commit to adding your watchpoint.
    // 2) Load a value from any scope that has this watchpoint set.
    //
    // Then you can be sure that that value is either going to be the correct value for that var forever,
    // or the watchpoint set will invalidate and you&apos;ll get fired.
    //
    // It&apos;s possible to write a program that first creates multiple scopes with the same var, and then
    // initializes that var in just one of them. This means that a compilation could constant-fold to one
    // of the scopes that still has an undefined value for this variable. That&apos;s fine, because at that
    // point any write to any of the instances of that variable would fire the watchpoint.
    //
    // Note that watchpointSet() returns nullptr if JIT is disabled.</doc>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/SymbolTable.h' l='289' u='c' c='_ZN3JSC16SymbolTableEntry15disableWatchingERNS_2VME'/>
<def f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/SymbolTable.h' l='318' ll='323' type='JSC::WatchpointSet * JSC::SymbolTableEntry::watchpointSet()'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/JSSymbolTableObject.h' l='174' u='c' c='_ZN3JSC14symbolTablePutEPT0_PNS_14JSGlobalObjectENS_12PropertyNameENS_7JSValueEbbRb'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/SymbolTable.h' l='297'>// This watchpoint set is initialized clear, and goes through the following state transitions:
    // 
    // First write to this var, in any scope that has this symbol table: Clear-&gt;IsWatched.
    //
    // Second write to this var, in any scope that has this symbol table: IsWatched-&gt;IsInvalidated.
    //
    // We ensure that we touch the set (i.e. trigger its state transition) after we do the write. This
    // means that if you&apos;re in the compiler thread, and you:
    //
    // 1) Observe that the set IsWatched and commit to adding your watchpoint.
    // 2) Load a value from any scope that has this watchpoint set.
    //
    // Then you can be sure that that value is either going to be the correct value for that var forever,
    // or the watchpoint set will invalidate and you&apos;ll get fired.
    //
    // It&apos;s possible to write a program that first creates multiple scopes with the same var, and then
    // initializes that var in just one of them. This means that a compilation could constant-fold to one
    // of the scopes that still has an undefined value for this variable. That&apos;s fine, because at that
    // point any write to any of the instances of that variable would fire the watchpoint.
    //
    // Note that watchpointSet() returns nullptr if JIT is disabled.</doc>
