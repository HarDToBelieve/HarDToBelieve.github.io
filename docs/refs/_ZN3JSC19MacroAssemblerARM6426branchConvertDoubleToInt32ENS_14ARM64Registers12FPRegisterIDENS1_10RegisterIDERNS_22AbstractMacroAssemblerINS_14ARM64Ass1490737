<def f='webkit/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h' l='1982' ll='1998' type='void JSC::MacroAssemblerARM64::branchConvertDoubleToInt32(JSC::AbstractMacroAssembler&lt;JSC::ARM64Assembler&gt;::FPRegisterID src, JSC::AbstractMacroAssembler&lt;JSC::ARM64Assembler&gt;::RegisterID dest, JSC::AbstractMacroAssembler&lt;JSC::ARM64Assembler&gt;::JumpList &amp; failureCases, JSC::AbstractMacroAssembler&lt;JSC::ARM64Assembler&gt;::FPRegisterID , bool negZeroCheck = true)'/>
<doc f='webkit/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h' l='1978'>// Convert &apos;src&apos; to an integer, and places the resulting &apos;dest&apos;.
    // If the result is not representable as a 32 bit value, branch.
    // May also branch for some values that are representable in 32 bits
    // (specifically, in this case, 0).</doc>
<use f='webkit/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp' l='2993' u='c' c='_ZN3JSC3DFG14SpeculativeJIT20compileDoubleAsInt32EPNS0_4NodeE'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp' l='6582' u='c' c='_ZN3JSC3DFG14SpeculativeJIT20compileArithRoundingEPNS0_4NodeE'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp' l='6983' u='c' c='_ZN3JSC3DFG14SpeculativeJIT15compileArithPowEPNS0_4NodeE'/>
<def f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/MacroAssemblerARM64.h' l='1982' ll='1998' type='void JSC::MacroAssemblerARM64::branchConvertDoubleToInt32(JSC::AbstractMacroAssembler&lt;JSC::ARM64Assembler&gt;::FPRegisterID src, JSC::AbstractMacroAssembler&lt;JSC::ARM64Assembler&gt;::RegisterID dest, JSC::AbstractMacroAssembler&lt;JSC::ARM64Assembler&gt;::JumpList &amp; failureCases, JSC::AbstractMacroAssembler&lt;JSC::ARM64Assembler&gt;::FPRegisterID , bool negZeroCheck = true)'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/MacroAssemblerARM64.h' l='1978'>// Convert &apos;src&apos; to an integer, and places the resulting &apos;dest&apos;.
    // If the result is not representable as a 32 bit value, branch.
    // May also branch for some values that are representable in 32 bits
    // (specifically, in this case, 0).</doc>
