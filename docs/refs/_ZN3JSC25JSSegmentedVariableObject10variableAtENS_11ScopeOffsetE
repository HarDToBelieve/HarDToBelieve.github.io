<def f='webkit/Source/JavaScriptCore/runtime/JSSegmentedVariableObject.h' l='71' type='WriteBarrier&lt;JSC::Unknown&gt; &amp; JSC::JSSegmentedVariableObject::variableAt(JSC::ScopeOffset offset)'/>
<doc f='webkit/Source/JavaScriptCore/runtime/JSSegmentedVariableObject.h' l='67'>// This is not thread-safe, since m_variables is a segmented vector, and its spine can resize with
    // malloc/free if new variables - unrelated to the one you are accessing - are added. You can get
    // around this by grabbing m_lock, or finding some other way to get to the variable pointer (global
    // variable access bytecode instructions will have a direct pointer already).</doc>
<def f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/JSSegmentedVariableObject.h' l='71' type='WriteBarrier&lt;JSC::Unknown&gt; &amp; JSC::JSSegmentedVariableObject::variableAt(JSC::ScopeOffset offset)'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/JSSegmentedVariableObject.h' l='67'>// This is not thread-safe, since m_variables is a segmented vector, and its spine can resize with
    // malloc/free if new variables - unrelated to the one you are accessing - are added. You can get
    // around this by grabbing m_lock, or finding some other way to get to the variable pointer (global
    // variable access bytecode instructions will have a direct pointer already).</doc>
