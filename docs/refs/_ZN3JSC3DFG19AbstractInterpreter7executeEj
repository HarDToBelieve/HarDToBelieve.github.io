<dec f='webkit/Source/JavaScriptCore/dfg/DFGAbstractInterpreter.h' l='149' type='bool JSC::DFG::AbstractInterpreter::execute(unsigned int indexInBlock)'/>
<def f='webkit/Source/JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h' l='4674' ll='4682' type='bool JSC::DFG::AbstractInterpreter::execute(unsigned int indexInBlock)'/>
<doc f='webkit/Source/JavaScriptCore/dfg/DFGAbstractInterpreter.h' l='137'>// Abstractly executes the given node. The new abstract state is stored into an
    // abstract stack stored in *this. Loads of local variables (that span
    // basic blocks) interrogate the basic block&apos;s notion of the state at the head.
    // Stores to local variables are handled in endBasicBlock(). This returns true
    // if execution should continue past this node. Notably, it will return true
    // for block terminals, so long as those terminals are not Return or Unreachable.
    //
    // This is guaranteed to be equivalent to doing:
    //
    // state.startExecuting()
    // state.executeEdges(node);
    // result = state.executeEffects(index);</doc>
