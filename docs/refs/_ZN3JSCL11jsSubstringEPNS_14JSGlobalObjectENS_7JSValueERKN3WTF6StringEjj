<def f='webkit/Source/JavaScriptCore/runtime/StringObject.h' l='102' ll='109' type='JSC::JSString * JSC::jsSubstring(JSC::JSGlobalObject * globalObject, JSC::JSValue originalValue, const WTF::String &amp; string, unsigned int offset, unsigned int length)'/>
<doc f='webkit/Source/JavaScriptCore/runtime/StringObject.h' l='97'>// Helper that tries to use the JSString substring sharing mechanism if &apos;originalValue&apos; is a JSString.
// FIXME: Basically any use of this is bad. toString() returns a JSString* so we don&apos;t need to
// pass around the originalValue; we could just pass around the JSString*. And since we&apos;ve
// resolved it, we know that we can just allocate the substring cell directly.
// https://bugs.webkit.org/show_bug.cgi?id=158140</doc>
<def f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/StringObject.h' l='102' ll='109' type='JSC::JSString * JSC::jsSubstring(JSC::JSGlobalObject * globalObject, JSC::JSValue originalValue, const WTF::String &amp; string, unsigned int offset, unsigned int length)'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/StringObject.h' l='97'>// Helper that tries to use the JSString substring sharing mechanism if &apos;originalValue&apos; is a JSString.
// FIXME: Basically any use of this is bad. toString() returns a JSString* so we don&apos;t need to
// pass around the originalValue; we could just pass around the JSString*. And since we&apos;ve
// resolved it, we know that we can just allocate the substring cell directly.
// https://bugs.webkit.org/show_bug.cgi?id=158140</doc>
