<def f='webkit/Source/JavaScriptCore/runtime/StringObject.h' l='88' ll='95' type='JSC::JSString * JSC::jsStringWithReuse(JSC::JSGlobalObject * globalObject, JSC::JSValue originalValue, const WTF::String &amp; string)'/>
<doc f='webkit/Source/JavaScriptCore/runtime/StringObject.h' l='82'>// Helper for producing a JSString for &apos;string&apos;, where &apos;string&apos; was been produced by
// calling ToString on &apos;originalValue&apos;. In cases where &apos;originalValue&apos; already was a
// string primitive we can just use this, otherwise we need to allocate a new JSString.
// FIXME: Basically any use of this is bad. toString() returns a JSString* so we don&apos;t need to
// pass around the originalValue; we could just pass around the JSString*. Then you don&apos;t need
// this function. You just use the JSString* that toString() returned.</doc>
<def f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/StringObject.h' l='88' ll='95' type='JSC::JSString * JSC::jsStringWithReuse(JSC::JSGlobalObject * globalObject, JSC::JSValue originalValue, const WTF::String &amp; string)'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/StringObject.h' l='82'>// Helper for producing a JSString for &apos;string&apos;, where &apos;string&apos; was been produced by
// calling ToString on &apos;originalValue&apos;. In cases where &apos;originalValue&apos; already was a
// string primitive we can just use this, otherwise we need to allocate a new JSString.
// FIXME: Basically any use of this is bad. toString() returns a JSString* so we don&apos;t need to
// pass around the originalValue; we could just pass around the JSString*. Then you don&apos;t need
// this function. You just use the JSString* that toString() returned.</doc>
