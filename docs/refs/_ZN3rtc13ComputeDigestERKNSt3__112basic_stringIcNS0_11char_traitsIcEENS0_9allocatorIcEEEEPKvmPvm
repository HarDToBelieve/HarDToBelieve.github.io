<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/message_digest.h' l='66' type='size_t rtc::ComputeDigest(const std::string &amp; alg, const void * input, size_t in_len, void * output, size_t out_len)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/transport/stun.cc' l='1292' u='c' c='_ZN7cricket25ComputeStunCredentialHashERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8_PS6_'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/message_digest.h' l='63'>// Like the previous function, but creates a digest implementation based on
// the desired digest name |alg|, e.g. DIGEST_SHA_1. Returns 0 if there is no
// digest with the given name.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/fake_ssl_identity.cc' l='68' u='c' c='_ZNK3rtc18FakeSSLCertificate13ComputeDigestERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPhmPm'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/message_digest.cc' l='62' ll='70' type='size_t rtc::ComputeDigest(const std::string &amp; alg, const void * input, size_t in_len, void * output, size_t out_len)'/>
