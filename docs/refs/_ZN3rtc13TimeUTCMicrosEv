<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/time_utils.h' l='137' type='int64_t rtc::TimeUTCMicros()'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/time_utils.h' l='127'>// Return the number of microseconds since January 1, 1970, UTC.
// Useful mainly when producing logs to be correlated with other
// devices, and when the devices in question all have properly
// synchronized clocks.
//
// Note that this function obeys the system&apos;s idea about what the time
// is. It is not guaranteed to be monotonic; it will jump in case the
// system time is changed, e.g., by some other process calling
// settimeofday. Always use rtc::TimeMicros(), not this function, for
// measuring time intervals and timeouts.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc' l='1442' u='c' c='_ZN6webrtc8internal4Call10DeliverRtpENS_9MediaTypeEN3rtc17CopyOnWriteBufferEx'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc' l='555' u='c' c='_ZN6webrtc12RTCPReceiver17HandleReportBlockERKNS_4rtcp11ReportBlockEPNS0_17PacketInformationEj'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc' l='1191' u='c' c='_ZN6webrtc17RTCStatsCollector22GetStatsReportInternalENS0_11RequestInfoE'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/time_utils.cc' l='246' ll='264' type='int64_t rtc::TimeUTCMicros()'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/time_utils.cc' l='267' u='c' c='_ZN3rtc13TimeUTCMillisEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/system_wrappers/source/clock.cc' l='39' u='c' c='_ZN6webrtc12_GLOBAL__N_121NtpOffsetUsCalledOnceEv'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/time_utils.h' l='137' type='int64_t rtc::TimeUTCMicros()'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/time_utils.h' l='127'>// Return the number of microseconds since January 1, 1970, UTC.
// Useful mainly when producing logs to be correlated with other
// devices, and when the devices in question all have properly
// synchronized clocks.
//
// Note that this function obeys the system&apos;s idea about what the time
// is. It is not guaranteed to be monotonic; it will jump in case the
// system time is changed, e.g., by some other process calling
// settimeofday. Always use rtc::TimeMicros(), not this function, for
// measuring time intervals and timeouts.</doc>
