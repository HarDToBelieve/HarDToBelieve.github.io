<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/time_utils.h' l='56' type='rtc::ClockInterface * rtc::SetClockForTesting(rtc::ClockInterface * clock)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/time_utils.h' l='42'>// Sets the global source of time. This is useful mainly for unit tests.
//
// Returns the previously set ClockInterface, or nullptr if none is set.
//
// Does not transfer ownership of the clock. SetClockForTesting(nullptr)
// should be called before the ClockInterface is deleted.
//
// This method is not thread-safe; it should only be used when no other thread
// is running (for example, at the start/end of a unit test, or start/end of
// main()).
//
// TODO(deadbeef): Instead of having functions that access this global
// ClockInterface, we may want to pass the ClockInterface into everything
// that uses it, eliminating the need for a global variable and this function.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/fake_clock.cc' l='47' u='c' c='_ZN3rtc19ScopedBaseFakeClockC1Ev'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/fake_clock.cc' l='51' u='c' c='_ZN3rtc19ScopedBaseFakeClockD1Ev'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/fake_clock.cc' l='55' u='c' c='_ZN3rtc15ScopedFakeClockC1Ev'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/fake_clock.cc' l='59' u='c' c='_ZN3rtc15ScopedFakeClockD1Ev'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/time_utils.cc' l='30' ll='34' type='rtc::ClockInterface * rtc::SetClockForTesting(rtc::ClockInterface * clock)'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/time_utils.h' l='56' type='rtc::ClockInterface * rtc::SetClockForTesting(rtc::ClockInterface * clock)'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/time_utils.h' l='42'>// Sets the global source of time. This is useful mainly for unit tests.
//
// Returns the previously set ClockInterface, or nullptr if none is set.
//
// Does not transfer ownership of the clock. SetClockForTesting(nullptr)
// should be called before the ClockInterface is deleted.
//
// This method is not thread-safe; it should only be used when no other thread
// is running (for example, at the start/end of a unit test, or start/end of
// main()).
//
// TODO(deadbeef): Instead of having functions that access this global
// ClockInterface, we may want to pass the ClockInterface into everything
// that uses it, eliminating the need for a global variable and this function.</doc>
