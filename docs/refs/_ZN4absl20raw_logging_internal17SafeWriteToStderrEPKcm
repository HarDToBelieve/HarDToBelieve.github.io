<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.h' l='117' type='void absl::raw_logging_internal::SafeWriteToStderr(const char * s, size_t len)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.cc' l='171' u='c' c='_ZN4absl20raw_logging_internal12_GLOBAL__N_18RawLogVAENS_11LogSeverityEPKciS4_Pc'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.cc' l='198' ll='210' type='void absl::raw_logging_internal::SafeWriteToStderr(const char * s, size_t len)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.h' l='112'>// Writes the provided buffer directly to stderr, in a safe, low-level manner.
//
// In POSIX this means calling write(), which is async-signal safe and does
// not malloc.  If the platform supports the SYS_write syscall, we invoke that
// directly to side-step any libc interception.</doc>
