<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/byte_io.h' l='112' u='c' c='_ZN6webrtc10ByteReaderIT_XT0_ELb1EE13ReadBigEndianEPKh'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/byte_io.h' l='119' u='c' c='_ZN6webrtc10ByteReaderIT_XT0_ELb1EE16ReadLittleEndianEPKh'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/byte_io.h' l='153' ll='165' type='static webrtc::ByteReader&lt;type-parameter-0-0, B, true&gt;::U webrtc::ByteReader&lt;type-parameter-0-0, B, true&gt;::SignExtend(const webrtc::ByteReader&lt;type-parameter-0-0, B, true&gt;::U val)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/byte_io.h' l='148'>// If number of bytes is less than native data type (eg 24 bit, in int32_t),
  // and the most significant bit of the actual data is set, we must sign
  // extend the remaining byte(s) with ones so that the correct negative
  // number is retained.
  // Ex: 0x810A0B -&gt; 0xFF810A0B, but 0x710A0B -&gt; 0x00710A0B</doc>
