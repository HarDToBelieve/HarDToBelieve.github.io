<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/rtc_error.h' l='257' type='void webrtc::RTCErrorOr::RTCErrorOr&lt;T&gt;(const T &amp; value)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/rtc_error.h' l='250'>// Constructs a new RTCErrorOr with the given value. After calling this
  // constructor, calls to value() will succeed, and calls to error() will
  // return a default-constructed RTCError.
  //
  // NOTE: Not explicit - we want to use RTCErrorOr&lt;T&gt; as a return type
  // so it is convenient and sensible to be able to do &apos;return T()&apos;
  // when the return type is RTCErrorOr&lt;T&gt;.</doc>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/rtc_error.h' l='257'>// NOLINT</doc>
<def f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/rtc_error.h' l='257' type='void webrtc::RTCErrorOr::RTCErrorOr&lt;T&gt;(const T &amp; value)'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/rtc_error.h' l='250'>// Constructs a new RTCErrorOr with the given value. After calling this
  // constructor, calls to value() will succeed, and calls to error() will
  // return a default-constructed RTCError.
  //
  // NOTE: Not explicit - we want to use RTCErrorOr&lt;T&gt; as a return type
  // so it is convenient and sensible to be able to do &apos;return T()&apos;
  // when the return type is RTCErrorOr&lt;T&gt;.</doc>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/rtc_error.h' l='257'>// NOLINT</doc>
