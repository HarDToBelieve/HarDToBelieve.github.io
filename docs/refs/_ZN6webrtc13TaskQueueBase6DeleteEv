<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/task_queue/task_queue_base.h' l='38' type='void webrtc::TaskQueueBase::Delete()'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/task_queue/task_queue_base.h' l='83' u='c' c='_ZNK6webrtc16TaskQueueDeleterclEPNS_13TaskQueueBaseE'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/task_queue/task_queue_base.h' l='27'>// Starts destruction of the task queue.
  // On return ensures no task are running and no new tasks are able to start
  // on the task queue.
  // Responsible for deallocation. Deallocation may happen synchronously during
  // Delete or asynchronously after Delete returns.
  // Code not running on the TaskQueue should not make any assumption when
  // TaskQueue is deallocated and thus should not call any methods after Delete.
  // Code running on the TaskQueue should not call Delete, but can assume
  // TaskQueue still exists and may call other methods, e.g. PostTask.
  // Should be called on the same task queue or thread that this task queue
  // was created on.</doc>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/utility/source/process_thread_impl.cc' l='64' c='_ZN6webrtc17ProcessThreadImpl6DeleteEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/task_queue.cc' l='25' u='c' c='_ZN3rtc9TaskQueueD1Ev'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/task_queue_stdlib.cc' l='142' c='_ZN6webrtc12_GLOBAL__N_115TaskQueueStdlib6DeleteEv'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/thread.cc' l='1116' c='_ZN3rtc6Thread6DeleteEv'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/task_queue/task_queue_base.h' l='38' type='void webrtc::TaskQueueBase::Delete()'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/task_queue/task_queue_base.h' l='83' u='c' c='_ZNK6webrtc16TaskQueueDeleterclEPNS_13TaskQueueBaseE'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/task_queue/task_queue_base.h' l='27'>// Starts destruction of the task queue.
  // On return ensures no task are running and no new tasks are able to start
  // on the task queue.
  // Responsible for deallocation. Deallocation may happen synchronously during
  // Delete or asynchronously after Delete returns.
  // Code not running on the TaskQueue should not make any assumption when
  // TaskQueue is deallocated and thus should not call any methods after Delete.
  // Code running on the TaskQueue should not call Delete, but can assume
  // TaskQueue still exists and may call other methods, e.g. PostTask.
  // Should be called on the same task queue or thread that this task queue
  // was created on.</doc>
