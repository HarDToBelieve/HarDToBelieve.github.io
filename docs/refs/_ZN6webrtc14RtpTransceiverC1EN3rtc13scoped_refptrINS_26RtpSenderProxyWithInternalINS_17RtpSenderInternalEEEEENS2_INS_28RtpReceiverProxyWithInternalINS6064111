<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.h' l='89' type='void webrtc::RtpTransceiver::RtpTransceiver(rtc::scoped_refptr&lt;RtpSenderProxyWithInternal&lt;RtpSenderInternal&gt;&gt; sender, rtc::scoped_refptr&lt;RtpReceiverProxyWithInternal&lt;RtpReceiverInternal&gt;&gt; receiver, cricket::ChannelManager * channel_manager, std::vector&lt;RtpHeaderExtensionCapability&gt; HeaderExtensionsToOffer, std::function&lt;void ()&gt; on_negotiation_needed)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.h' l='84'>// Construct a Unified Plan-style RtpTransceiver with the given sender and
  // receiver. The media type will be derived from the media types of the sender
  // and receiver. The sender and receiver should have the same media type.
  // |HeaderExtensionsToOffer| is used for initializing the return value of
  // HeaderExtensionsToOffer().</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transceiver.cc' l='128' ll='147' type='void webrtc::RtpTransceiver::RtpTransceiver(rtc::scoped_refptr&lt;RtpSenderProxyWithInternal&lt;RtpSenderInternal&gt;&gt; sender, rtc::scoped_refptr&lt;RtpReceiverProxyWithInternal&lt;RtpReceiverInternal&gt;&gt; receiver, cricket::ChannelManager * channel_manager, std::vector&lt;RtpHeaderExtensionCapability&gt; header_extensions_offered, std::function&lt;void ()&gt; on_negotiation_needed)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transmission_manager.cc' l='273' u='c' c='_ZN6webrtc22RtpTransmissionManager23CreateAndAddTransceiverEN3rtc13scoped_refptrINS_26RtpSenderProxyWithInternalINS_17RtpSenderInternalEEEEENS2_INS_2814914939'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/pc/rtp_transceiver.h' l='89' type='void webrtc::RtpTransceiver::RtpTransceiver(rtc::scoped_refptr&lt;RtpSenderProxyWithInternal&lt;RtpSenderInternal&gt;&gt; sender, rtc::scoped_refptr&lt;RtpReceiverProxyWithInternal&lt;RtpReceiverInternal&gt;&gt; receiver, cricket::ChannelManager * channel_manager, std::vector&lt;RtpHeaderExtensionCapability&gt; HeaderExtensionsToOffer, std::function&lt;void ()&gt; on_negotiation_needed)'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/pc/rtp_transceiver.h' l='84'>// Construct a Unified Plan-style RtpTransceiver with the given sender and
  // receiver. The media type will be derived from the media types of the sender
  // and receiver. The sender and receiver should have the same media type.
  // |HeaderExtensionsToOffer| is used for initializing the return value of
  // HeaderExtensionsToOffer().</doc>
