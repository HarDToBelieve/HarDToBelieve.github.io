<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_device/audio_device_buffer.h' l='122' type='void webrtc::AudioDeviceBuffer::LogStats(webrtc::AudioDeviceBuffer::LogState state)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_device/audio_device_buffer.cc' l='351' u='c' c='_ZN6webrtc17AudioDeviceBuffer20StartPeriodicLoggingEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_device/audio_device_buffer.cc' l='355' u='c' c='_ZN6webrtc17AudioDeviceBuffer19StopPeriodicLoggingEv'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_device/audio_device_buffer.cc' l='358' ll='463' type='void webrtc::AudioDeviceBuffer::LogStats(webrtc::AudioDeviceBuffer::LogState state)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_device/audio_device_buffer.cc' l='461' u='c' c='_ZN6webrtc17AudioDeviceBuffer8LogStatsENS0_8LogStateE'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_device/audio_device_buffer.h' l='116'>// Called periodically on the internal thread created by the TaskQueue.
  // Updates some stats but dooes it on the task queue to ensure that access of
  // members is serialized hence avoiding usage of locks.
  // state = LOG_START =&gt; members are initialized and the timer starts.
  // state = LOG_STOP =&gt; no logs are printed and the timer stops.
  // state = LOG_ACTIVE =&gt; logs are printed and the timer is kept alive.</doc>
