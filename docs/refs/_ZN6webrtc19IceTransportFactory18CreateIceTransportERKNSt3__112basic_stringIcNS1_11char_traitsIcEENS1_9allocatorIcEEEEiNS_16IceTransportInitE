<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/ice_transport_interface.h' l='102' type='rtc::scoped_refptr&lt;IceTransportInterface&gt; webrtc::IceTransportFactory::CreateIceTransport(const std::string &amp; transport_name, int component, webrtc::IceTransportInit init)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/ice_transport_interface.h' l='93'>// As a refcounted object, the returned ICE transport may outlive the host
  // construct into which its reference is given, e.g. a peer connection. As a
  // result, the returned ICE transport should not hold references to any object
  // that the transport does not own and that has a lifetime bound to the host
  // construct. Also, assumptions on the thread safety of the returned transport
  // should be clarified by implementations. For example, a peer connection
  // requires the returned transport to be constructed and destroyed on the
  // network thread and an ICE transport factory that intends to work with a
  // peer connection should offer transports compatible with these assumptions.</doc>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/default_ice_transport_factory.cc' l='42' c='_ZN6webrtc26DefaultIceTransportFactory18CreateIceTransportERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiNS_16IceTransportInitE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport_controller.cc' l='403' u='c' c='_ZN6webrtc23JsepTransportController18CreateIceTransportERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/ice_transport_interface.h' l='102' type='rtc::scoped_refptr&lt;IceTransportInterface&gt; webrtc::IceTransportFactory::CreateIceTransport(const std::string &amp; transport_name, int component, webrtc::IceTransportInit init)'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/ice_transport_interface.h' l='93'>// As a refcounted object, the returned ICE transport may outlive the host
  // construct into which its reference is given, e.g. a peer connection. As a
  // result, the returned ICE transport should not hold references to any object
  // that the transport does not own and that has a lifetime bound to the host
  // construct. Also, assumptions on the thread safety of the returned transport
  // should be clarified by implementations. For example, a peer connection
  // requires the returned transport to be constructed and destroyed on the
  // network thread and an ICE transport factory that intends to work with a
  // peer connection should offer transports compatible with these assumptions.</doc>
