<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/transient/transient_suppressor.h' l='47' type='int webrtc::TransientSuppressor::Suppress(float * data, size_t data_length, int num_channels, const float * detection_data, size_t detection_length, const float * reference_data, size_t reference_length, float voice_probability, bool key_pressed)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/transient/transient_suppressor.h' l='30'>// Processes a |data| chunk, and returns it with keystrokes suppressed from
  // it. The float format is assumed to be int16 ranged. If there are more than
  // one channel, the chunks are concatenated one after the other in |data|.
  // |data_length| must be equal to |data_length_|.
  // |num_channels| must be equal to |num_channels_|.
  // A sub-band, ideally the higher, can be used as |detection_data|. If it is
  // NULL, |data| is used for the detection too. The |detection_data| is always
  // assumed mono.
  // If a reference signal (e.g. keyboard microphone) is available, it can be
  // passed in as |reference_data|. It is assumed mono and must have the same
  // length as |data|. NULL is accepted if unavailable.
  // This suppressor performs better if voice information is available.
  // |voice_probability| is the probability of voice being present in this chunk
  // of audio. If voice information is not available, |voice_probability| must
  // always be set to 1.
  // |key_pressed| determines if a key was pressed on this audio chunk.
  // Returns 0 on success and -1 otherwise.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc' l='1318' u='c' c='_ZN6webrtc19AudioProcessingImpl26ProcessCaptureStreamLockedEv'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/transient/transient_suppressor_impl.cc' l='161' c='_ZN6webrtc23TransientSuppressorImpl8SuppressEPfmiPKfmS3_mfb'/>
