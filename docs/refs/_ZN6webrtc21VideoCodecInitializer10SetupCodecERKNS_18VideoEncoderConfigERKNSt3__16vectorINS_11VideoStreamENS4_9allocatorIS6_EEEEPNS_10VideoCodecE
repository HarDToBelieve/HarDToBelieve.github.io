<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/include/video_codec_initializer.h' l='33' type='static bool webrtc::VideoCodecInitializer::SetupCodec(const webrtc::VideoEncoderConfig &amp; config, const std::vector&lt;VideoStream&gt; &amp; streams, webrtc::VideoCodec * codec)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/video_codec_initializer.cc' l='33' ll='49' type='static bool webrtc::VideoCodecInitializer::SetupCodec(const webrtc::VideoEncoderConfig &amp; config, const std::vector&lt;VideoStream&gt; &amp; streams, webrtc::VideoCodec * codec)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/video_codec_initializer.cc' l='39' u='c' c='_ZN6webrtc21VideoCodecInitializer10SetupCodecERKNS_18VideoEncoderConfigERKNSt3__16vectorINS_11VideoStreamENS4_9allocatorIS6_EEEEPNS_10VideoCodecE'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/include/video_codec_initializer.h' l='27'>// Takes a VideoEncoderConfig and the VideoStream configuration and
  // translates them into the old school VideoCodec type.
  // It also creates a VideoBitrateAllocator instance, suitable for the codec
  // type used. For instance, VP8 will create an allocator than can handle
  // simulcast and temporal layering.
  // GetBitrateAllocator is called implicitly from here, no need to call again.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_stream_encoder.cc' l='969' u='c' c='_ZN6webrtc18VideoStreamEncoder18ReconfigureEncoderEv'/>
