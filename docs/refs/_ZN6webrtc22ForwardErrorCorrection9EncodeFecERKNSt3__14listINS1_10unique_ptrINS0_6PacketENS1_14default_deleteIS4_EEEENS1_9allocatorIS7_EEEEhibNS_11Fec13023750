<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.h' l='192' type='int webrtc::ForwardErrorCorrection::EncodeFec(const webrtc::ForwardErrorCorrection::PacketList &amp; media_packets, uint8_t protection_factor, int num_important_packets, bool use_unequal_protection, webrtc::FecMaskType fec_mask_type, std::list&lt;Packet *&gt; * fec_packets)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.h' l='156'>// Generates a list of FEC packets from supplied media packets.
  //
  // Input:  media_packets          List of media packets to protect, of type
  //                                Packet. All packets must belong to the
  //                                same frame and the list must not be empty.
  // Input:  protection_factor      FEC protection overhead in the [0, 255]
  //                                domain. To obtain 100% overhead, or an
  //                                equal number of FEC packets as
  //                                media packets, use 255.
  // Input:  num_important_packets  The number of &quot;important&quot; packets in the
  //                                frame. These packets may receive greater
  //                                protection than the remaining packets.
  //                                The important packets must be located at the
  //                                start of the media packet list. For codecs
  //                                with data partitioning, the important
  //                                packets may correspond to first partition
  //                                packets.
  // Input:  use_unequal_protection Parameter to enable/disable unequal
  //                                protection (UEP) across packets. Enabling
  //                                UEP will allocate more protection to the
  //                                num_important_packets from the start of the
  //                                media_packets.
  // Input:  fec_mask_type          The type of packet mask used in the FEC.
  //                                Random or bursty type may be selected. The
  //                                bursty type is only defined up to 12 media
  //                                packets. If the number of media packets is
  //                                above 12, the packet masks from the random
  //                                table will be selected.
  // Output: fec_packets            List of pointers to generated FEC packets,
  //                                of type Packet. Must be empty on entry.
  //                                The memory available through the list will
  //                                be valid until the next call to
  //                                EncodeFec().
  //
  // Returns 0 on success, -1 on failure.
  //</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.cc' l='109' ll='189' type='int webrtc::ForwardErrorCorrection::EncodeFec(const webrtc::ForwardErrorCorrection::PacketList &amp; media_packets, uint8_t protection_factor, int num_important_packets, bool use_unequal_protection, webrtc::FecMaskType fec_mask_type, std::list&lt;Packet *&gt; * fec_packets)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/ulpfec_generator.cc' l='160' u='c' c='_ZN6webrtc15UlpfecGenerator23AddPacketAndGenerateFecERKNS_15RtpPacketToSendE'/>
