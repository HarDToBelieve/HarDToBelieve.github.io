<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/logging/rtc_event_log/events/rtc_event_generic_ack_received.h' l='37' type='static std::vector&lt;std::unique_ptr&lt;RtcEventGenericAckReceived&gt;&gt; webrtc::RtcEventGenericAckReceived::CreateLogs(int64_t packet_number, const std::vector&lt;AckedPacket&gt; &amp; acked_packets)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/logging/rtc_event_log/events/rtc_event_generic_ack_received.cc' l='20' ll='33' type='static std::vector&lt;std::unique_ptr&lt;RtcEventGenericAckReceived&gt;&gt; webrtc::RtcEventGenericAckReceived::CreateLogs(int64_t packet_number, const std::vector&lt;AckedPacket&gt; &amp; acked_packets)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/logging/rtc_event_log/events/rtc_event_generic_ack_received.h' l='35'>// For a collection of acked packets, it creates a vector of logs to log with
  // the same timestamp.</doc>
