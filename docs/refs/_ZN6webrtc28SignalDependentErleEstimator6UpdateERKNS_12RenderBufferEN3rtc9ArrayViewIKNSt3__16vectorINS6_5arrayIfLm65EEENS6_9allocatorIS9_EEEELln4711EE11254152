<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/signal_dependent_erle_estimator.h' l='48' type='void webrtc::SignalDependentErleEstimator::Update(const webrtc::RenderBuffer &amp; render_buffer, rtc::ArrayView&lt;const std::vector&lt;std::array&lt;float, kFftLengthBy2Plus1&gt;&gt;&gt; filter_frequency_response, rtc::ArrayView&lt;const float, kFftLengthBy2Plus1&gt; X2, rtc::ArrayView&lt;const std::array&lt;float, kFftLengthBy2Plus1&gt;&gt; Y2, rtc::ArrayView&lt;const std::array&lt;float, kFftLengthBy2Plus1&gt;&gt; E2, rtc::ArrayView&lt;const std::array&lt;float, kFftLengthBy2Plus1&gt;&gt; average_erle, rtc::ArrayView&lt;const std::array&lt;float, kFftLengthBy2Plus1&gt;&gt; average_erle_onset_compensated, const std::vector&lt;bool&gt; &amp; converged_filters)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/signal_dependent_erle_estimator.h' l='46'>// Updates the Erle estimate. The Erle that is passed as an input is required
  // to be an estimation of the average Erle achieved by the linear filter.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/erle_estimator.cc' l='70' u='c' c='_ZN6webrtc13ErleEstimator6UpdateERKNS_12RenderBufferEN3rtc9ArrayViewIKNSt3__16vectorINS6_5arrayIfLm65EEENS6_9allocatorIS9_EEEELln4711EEENS5_IKfLl65EEE13133836'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/signal_dependent_erle_estimator.cc' l='178' ll='217' type='void webrtc::SignalDependentErleEstimator::Update(const webrtc::RenderBuffer &amp; render_buffer, rtc::ArrayView&lt;const std::vector&lt;std::array&lt;float, kFftLengthBy2Plus1&gt;&gt;&gt; filter_frequency_responses, rtc::ArrayView&lt;const float, kFftLengthBy2Plus1&gt; X2, rtc::ArrayView&lt;const std::array&lt;float, kFftLengthBy2Plus1&gt;&gt; Y2, rtc::ArrayView&lt;const std::array&lt;float, kFftLengthBy2Plus1&gt;&gt; E2, rtc::ArrayView&lt;const std::array&lt;float, kFftLengthBy2Plus1&gt;&gt; average_erle, rtc::ArrayView&lt;const std::array&lt;float, kFftLengthBy2Plus1&gt;&gt; average_erle_onset_compensated, const std::vector&lt;bool&gt; &amp; converged_filters)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/signal_dependent_erle_estimator.cc' l='172'>// Updates the Erle estimate by analyzing the current input signals. It takes
// the render buffer and the filter frequency response in order to do an
// estimation of the number of sections of the linear filter that are needed
// for getting the majority of the energy in the echo estimate. Based on that
// number of sections, it updates the erle estimation by introducing a
// correction factor to the erle that is given as an input to this method.</doc>
