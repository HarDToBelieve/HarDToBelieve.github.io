<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_common.h' l='83' type='std::vector&lt;uint8_t&gt; webrtc::H265::ParseRbsp(const uint8_t * data, size_t length)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_common.cc' l='63' ll='84' type='std::vector&lt;uint8_t&gt; webrtc::H265::ParseRbsp(const uint8_t * data, size_t length)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_common.h' l='69'>// Methods for parsing and writing RBSP. See section 7.4.2 of the H265 spec.
//
// The following sequences are illegal, and need to be escaped when encoding:
// 00 00 00 -&gt; 00 00 03 00
// 00 00 01 -&gt; 00 00 03 01
// 00 00 02 -&gt; 00 00 03 02
// And things in the source that look like the emulation byte pattern (00 00 03)
// need to have an extra emulation byte added, so it&apos;s removed when decoding:
// 00 00 03 -&gt; 00 00 03 03
//
// Decoding is simply a matter of finding any 00 00 03 sequence and removing
// the 03 emulation byte.

// Parse the given data and remove any emulation byte escaping.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_sps_parser.cc' l='40' u='c' c='_ZN6webrtc13H265SpsParser8ParseSpsEPKhm'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h265/h265_vps_parser.cc' l='40' u='c' c='_ZN6webrtc13H265VpsParser8ParseVpsEPKhm'/>
