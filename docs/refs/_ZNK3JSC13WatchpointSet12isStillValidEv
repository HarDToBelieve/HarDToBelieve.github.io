<def f='webkit/Source/JavaScriptCore/bytecode/Watchpoint.h' l='221' ll='224' type='bool JSC::WatchpointSet::isStillValid() const'/>
<use f='webkit/Source/JavaScriptCore/bytecode/Watchpoint.h' l='231' u='c' c='_ZNK3JSC13WatchpointSet18hasBeenInvalidatedEv'/>
<doc f='webkit/Source/JavaScriptCore/bytecode/Watchpoint.h' l='215'>// It is safe to call this from another thread.  It may return true
    // even if the set actually had been invalidated, but that ought to happen
    // only in the case of races, and should be rare. Guarantees that if you
    // call this after observing something that must imply that the set is
    // invalidated, then you will see this return false. This is ensured by
    // issuing a load-load fence prior to querying the state.</doc>
<use f='webkit/Source/JavaScriptCore/runtime/PropertySlot.h' l='364' u='c' c='_ZN3JSC12PropertySlot16setWatchpointSetERNS_13WatchpointSetE'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGGraph.h' l='506' u='c' c='_ZN3JSC3DFG5Graph44masqueradesAsUndefinedWatchpointIsStillValidERKNS_10CodeOriginE'/>
<def f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/Watchpoint.h' l='221' ll='224' type='bool JSC::WatchpointSet::isStillValid() const'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/Watchpoint.h' l='231' u='c' c='_ZNK3JSC13WatchpointSet18hasBeenInvalidatedEv'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/PropertySlot.h' l='364' u='c' c='_ZN3JSC12PropertySlot16setWatchpointSetERNS_13WatchpointSetE'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/Watchpoint.h' l='215'>// It is safe to call this from another thread.  It may return true
    // even if the set actually had been invalidated, but that ought to happen
    // only in the case of races, and should be rare. Guarantees that if you
    // call this after observing something that must imply that the set is
    // invalidated, then you will see this return false. This is ensured by
    // issuing a load-load fence prior to querying the state.</doc>
