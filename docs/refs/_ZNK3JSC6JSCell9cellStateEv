<def f='webkit/Source/JavaScriptCore/runtime/JSCell.h' l='196' type='JSC::CellState JSC::JSCell::cellState() const'/>
<doc f='webkit/Source/JavaScriptCore/runtime/JSCell.h' l='193'>// The recommended idiom for using cellState() is to switch on it or perform an == comparison on it
    // directly. We deliberately avoid helpers for this, because we want transparency about how the various
    // CellState values influences our various algorithms. </doc>
<use f='webkit/Source/JavaScriptCore/heap/HeapInlines.h' l='113' u='c' c='_ZN3JSC4Heap12writeBarrierEPKNS_6JSCellEPS1_'/>
<use f='webkit/Source/JavaScriptCore/heap/HeapInlines.h' l='125' u='c' c='_ZN3JSC4Heap12writeBarrierEPKNS_6JSCellE'/>
<use f='webkit/Source/JavaScriptCore/heap/HeapInlines.h' l='134' u='c' c='_ZN3JSC4Heap24writeBarrierWithoutFenceEPKNS_6JSCellE'/>
<def f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/JSCell.h' l='196' type='JSC::CellState JSC::JSCell::cellState() const'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/JSCell.h' l='193'>// The recommended idiom for using cellState() is to switch on it or perform an == comparison on it
    // directly. We deliberately avoid helpers for this, because we want transparency about how the various
    // CellState values influences our various algorithms. </doc>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/HeapInlines.h' l='113' u='c' c='_ZN3JSC4Heap12writeBarrierEPKNS_6JSCellEPS1_'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/HeapInlines.h' l='125' u='c' c='_ZN3JSC4Heap12writeBarrierEPKNS_6JSCellE'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/HeapInlines.h' l='134' u='c' c='_ZN3JSC4Heap24writeBarrierWithoutFenceEPKNS_6JSCellE'/>
