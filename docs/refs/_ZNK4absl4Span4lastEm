<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/types/span.h' l='433' ll='437' type='Span&lt;T&gt; absl::Span::last(absl::Span::size_type len) const'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/types/span.h' l='422'>// Span::last()
  //
  // Returns a `Span` containing last `len` elements. Parameter `len` is of
  // type `size_type` and thus non-negative. `len` value must be &lt;= size().
  //
  // Examples:
  //
  //   std::vector&lt;int&gt; vec = {10, 11, 12, 13};
  //   absl::MakeSpan(vec).last(1);  // {13}
  //   absl::MakeSpan(vec).last(3);  // {11, 12, 13}
  //   absl::MakeSpan(vec).last(5);  // throws std::out_of_range</doc>
<def f='webkit/WebKitBuild/Debug/usr/local/include/absl/types/span.h' l='433' ll='437' type='Span&lt;T&gt; absl::Span::last(absl::Span::size_type len) const'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/absl/types/span.h' l='422'>// Span::last()
  //
  // Returns a `Span` containing last `len` elements. Parameter `len` is of
  // type `size_type` and thus non-negative. `len` value must be &lt;= size().
  //
  // Examples:
  //
  //   std::vector&lt;int&gt; vec = {10, 11, 12, 13};
  //   absl::MakeSpan(vec).last(1);  // {13}
  //   absl::MakeSpan(vec).last(3);  // {11, 12, 13}
  //   absl::MakeSpan(vec).last(5);  // throws std::out_of_range</doc>
