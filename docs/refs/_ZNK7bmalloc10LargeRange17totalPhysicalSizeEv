<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='56' u='c' c='_ZN7bmalloc10LargeRangeC1ERKNS_5RangeEmm'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='57' u='c' c='_ZN7bmalloc10LargeRangeC1ERKNS_5RangeEmm'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='66' u='c' c='_ZN7bmalloc10LargeRangeC1EPvmmm'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='67' u='c' c='_ZN7bmalloc10LargeRangeC1EPvmmm'/>
<def f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='99' type='size_t bmalloc::LargeRange::totalPhysicalSize() const'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='155' u='c' c='_ZN7bmalloc5mergeERKNS_10LargeRangeES2_'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='155' u='c' c='_ZN7bmalloc5mergeERKNS_10LargeRangeES2_'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='167' u='c' c='_ZN7bmalloc5mergeERKNS_10LargeRangeES2_'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='167' u='c' c='_ZN7bmalloc5mergeERKNS_10LargeRangeES2_'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='180' u='c' c='_ZNK7bmalloc10LargeRange5splitEm'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='182' u='c' c='_ZNK7bmalloc10LargeRange5splitEm'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='187' u='c' c='_ZNK7bmalloc10LargeRange5splitEm'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='190' u='c' c='_ZNK7bmalloc10LargeRange5splitEm'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/bmalloc/LargeRange.h' l='88'>// This is accurate in the sense that if you take a range A and split it N ways
    // and sum totalPhysicalSize over each of the N splits, you&apos;ll end up with A&apos;s
    // totalPhysicalSize. This means if you take a LargeRange out of a LargeMap, split it,
    // then insert the subsequent two ranges back into the LargeMap, the sum of the
    // totalPhysicalSize of each LargeRange in the LargeMap will stay constant. This
    // property is not true of startPhysicalSize. This invariant about totalPhysicalSize
    // is good enough to get an accurate footprint estimate for memory used in bmalloc.
    // The reason this is just an estimate is that splitting LargeRanges may lead to this
    // number being rebalanced in arbitrary ways between the two resulting ranges. This
    // is why the footprint is just an estimate. In practice, this arbitrary rebalance
    // doesn&apos;t really affect accuracy.</doc>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='56' u='c' c='_ZN7bmalloc10LargeRangeC1ERKNS_5RangeEmm'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='57' u='c' c='_ZN7bmalloc10LargeRangeC1ERKNS_5RangeEmm'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='66' u='c' c='_ZN7bmalloc10LargeRangeC1EPvmmm'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='67' u='c' c='_ZN7bmalloc10LargeRangeC1EPvmmm'/>
<def f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='99' type='size_t bmalloc::LargeRange::totalPhysicalSize() const'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='155' u='c' c='_ZN7bmalloc5mergeERKNS_10LargeRangeES2_'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='155' u='c' c='_ZN7bmalloc5mergeERKNS_10LargeRangeES2_'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='167' u='c' c='_ZN7bmalloc5mergeERKNS_10LargeRangeES2_'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='167' u='c' c='_ZN7bmalloc5mergeERKNS_10LargeRangeES2_'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='180' u='c' c='_ZNK7bmalloc10LargeRange5splitEm'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='182' u='c' c='_ZNK7bmalloc10LargeRange5splitEm'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='187' u='c' c='_ZNK7bmalloc10LargeRange5splitEm'/>
<use f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='190' u='c' c='_ZNK7bmalloc10LargeRange5splitEm'/>
<doc f='webkit/Source/bmalloc/bmalloc/LargeRange.h' l='88'>// This is accurate in the sense that if you take a range A and split it N ways
    // and sum totalPhysicalSize over each of the N splits, you&apos;ll end up with A&apos;s
    // totalPhysicalSize. This means if you take a LargeRange out of a LargeMap, split it,
    // then insert the subsequent two ranges back into the LargeMap, the sum of the
    // totalPhysicalSize of each LargeRange in the LargeMap will stay constant. This
    // property is not true of startPhysicalSize. This invariant about totalPhysicalSize
    // is good enough to get an accurate footprint estimate for memory used in bmalloc.
    // The reason this is just an estimate is that splitting LargeRanges may lead to this
    // number being rebalanced in arbitrary ways between the two resulting ranges. This
    // is why the footprint is just an estimate. In practice, this arbitrary rebalance
    // doesn&apos;t really affect accuracy.</doc>
<use f='webkit/Source/bmalloc/bmalloc/Heap.cpp' l='109' u='c' c='_ZN7bmalloc4Heap18decommitLargeRangeERNSt3__111unique_lockINS_5MutexEEERNS_10LargeRangeERNS_12BulkDecommitE'/>
<use f='webkit/Source/bmalloc/bmalloc/Heap.cpp' l='110' u='c' c='_ZN7bmalloc4Heap18decommitLargeRangeERNSt3__111unique_lockINS_5MutexEEERNS_10LargeRangeERNS_12BulkDecommitE'/>
<use f='webkit/Source/bmalloc/bmalloc/Heap.cpp' l='524' u='c' c='_ZN7bmalloc4Heap16splitAndAllocateERNSt3__111unique_lockINS_5MutexEEERNS_10LargeRangeEmm'/>
<use f='webkit/Source/bmalloc/bmalloc/Heap.cpp' l='534' u='c' c='_ZN7bmalloc4Heap16splitAndAllocateERNSt3__111unique_lockINS_5MutexEEERNS_10LargeRangeEmm'/>
<use f='webkit/Source/bmalloc/bmalloc/Heap.cpp' l='539' u='c' c='_ZN7bmalloc4Heap16splitAndAllocateERNSt3__111unique_lockINS_5MutexEEERNS_10LargeRangeEmm'/>
<use f='webkit/Source/bmalloc/bmalloc/Heap.cpp' l='590' u='c' c='_ZN7bmalloc4Heap13allocateLargeERNSt3__111unique_lockINS_5MutexEEEmmNS_13FailureActionE'/>
