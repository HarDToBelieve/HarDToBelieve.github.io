<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.h' l='198' type='void cricket::MediaSessionDescriptionFactory::GetCodecsForAnswer(const std::vector&lt;const ContentInfo *&gt; &amp; current_active_contents, const cricket::SessionDescription &amp; remote_offer, cricket::AudioCodecs * audio_codecs, cricket::VideoCodecs * video_codecs) const'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc' l='1660' u='c' c='_ZNK7cricket30MediaSessionDescriptionFactory12CreateAnswerEPKNS_18SessionDescriptionERKNS_19MediaSessionOptionsES3_'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc' l='1947' ll='1996' type='void cricket::MediaSessionDescriptionFactory::GetCodecsForAnswer(const std::vector&lt;const ContentInfo *&gt; &amp; current_active_contents, const cricket::SessionDescription &amp; remote_offer, cricket::AudioCodecs * audio_codecs, cricket::VideoCodecs * video_codecs) const'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc' l='1940'>// Getting codecs for an answer involves these steps:
//
// 1. Construct payload type -&gt; codec mappings for current description.
// 2. Add any codecs from the offer that weren&apos;t already present.
// 3. Add any remaining codecs that weren&apos;t already present.
// 4. For each individual media description (m= section), filter codecs based
//    on the directional attribute (happens in another method).</doc>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/pc/media_session.h' l='198' type='void cricket::MediaSessionDescriptionFactory::GetCodecsForAnswer(const std::vector&lt;const ContentInfo *&gt; &amp; current_active_contents, const cricket::SessionDescription &amp; remote_offer, cricket::AudioCodecs * audio_codecs, cricket::VideoCodecs * video_codecs) const'/>
