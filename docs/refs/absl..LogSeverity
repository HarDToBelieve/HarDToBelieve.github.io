<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/log_severity.h' l='69' ll='74'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/log_severity.h' l='80' c='_ZN4absl13LogSeveritiesEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/log_severity.h' l='89' c='_ZN4absl15LogSeverityNameENS_11LogSeverityE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/log_severity.h' l='103' c='_ZN4absl20NormalizeLogSeverityENS_11LogSeverityE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/log_severity.h' l='103' c='_ZN4absl20NormalizeLogSeverityENS_11LogSeverityE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/log_severity.h' l='108' c='_ZN4absl20NormalizeLogSeverityEi'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/log_severity.h' l='109' c='_ZN4absl20NormalizeLogSeverityEi'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/log_severity.h' l='116' c='_ZN4absllsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEENS_11LogSeverityE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.h' l='109' c='_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.h' l='154'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.h' l='173'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.cc' l='133' c='_ZN4absl20raw_logging_internal12_GLOBAL__N_18RawLogVAENS_11LogSeverityEPKciS4_Pc'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.cc' l='135' c='_ZN4absl20raw_logging_internal12_GLOBAL__N_18RawLogVAENS_11LogSeverityEPKciS4_Pc'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.cc' l='190' c='_ZN4absl20raw_logging_internal12_GLOBAL__N_118DefaultInternalLogENS_11LogSeverityEPKciRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.cc' l='212' c='_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/log_severity.h' l='27'>// absl::LogSeverity
//
// Four severity levels are defined. Logging APIs should terminate the program
// when a message is logged at severity `kFatal`; the other levels have no
// special semantics.
//
// Values other than the four defined levels (e.g. produced by `static_cast`)
// are valid, but their semantics when passed to a function, macro, or flag
// depend on the function, macro, or flag. The usual behavior is to normalize
// such values to a defined severity level, however in some cases values other
// than the defined levels are useful for comparison.
//
// Example:
//
//   // Effectively disables all logging:
//   SetMinLogLevel(static_cast&lt;absl::LogSeverity&gt;(100));
//
// Abseil flags may be defined with type `LogSeverity`. Dependency layering
// constraints require that the `AbslParseFlag()` overload be declared and
// defined in the flags library itself rather than here. The `AbslUnparseFlag()`
// overload is defined there as well for consistency.
//
// absl::LogSeverity Flag String Representation
//
// An `absl::LogSeverity` has a string representation used for parsing
// command-line flags based on the enumerator name (e.g. `kFatal`) or
// its unprefixed name (without the `k`) in any case-insensitive form. (E.g.
// &quot;FATAL&quot;, &quot;fatal&quot; or &quot;Fatal&quot; are all valid.) Unparsing such flags produces an
// unprefixed string representation in all caps (e.g. &quot;FATAL&quot;) or an integer.
//
// Additionally, the parser accepts arbitrary integers (as if the type were
// `int`).
//
// Examples:
//
//   --my_log_level=kInfo
//   --my_log_level=INFO
//   --my_log_level=info
//   --my_log_level=0
//
// Unparsing a flag produces the same result as `absl::LogSeverityName()` for
// the standard levels and a base-ten integer otherwise.</doc>
