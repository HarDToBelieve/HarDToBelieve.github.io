<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/internal.h' l='488' type='int bn_miller_rabin_iteration(const BN_MILLER_RABIN * miller_rabin, int * out_is_possibly_prime, const BIGNUM * b, const BN_MONT_CTX * mont, BN_CTX * ctx)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/internal.h' l='482'>// bn_miller_rabin_iteration performs one Miller-Rabin iteration, checking if
// |b| is a composite witness for |mont-&gt;N|. |miller_rabin| must have been
// initialized with |bn_miller_rabin_setup|. On success, it returns one and sets
// |*out_is_possibly_prime| to one if |mont-&gt;N| may still be prime or zero if
// |b| shows it is composite. On allocation or internal failure, it returns
// zero.</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/prime.c' l='540' ll='605' type='int bn_miller_rabin_iteration(const BN_MILLER_RABIN * miller_rabin, int * out_is_possibly_prime, const BIGNUM * b, const BN_MONT_CTX * mont, BN_CTX * ctx)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/prime.c' l='749' u='c' c='BN_primality_test'/>
