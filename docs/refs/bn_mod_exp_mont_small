<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/internal.h' l='695' type='void bn_mod_exp_mont_small(uint64_t * r, const uint64_t * a, size_t num, const uint64_t * p, size_t num_p, const BN_MONT_CTX * mont)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/internal.h' l='684'>// bn_mod_exp_mont_small sets |r| to |a|^|p| mod |mont-&gt;N|. It returns one on
// success and zero on programmer or internal error. Both inputs and outputs are
// in the Montgomery domain. |r| and |a| are |num| words long, which must be
// |mont-&gt;N.width| and at most |BN_SMALL_MAX_WORDS|. |a| must be fully-reduced.
// This function runs in time independent of |a|, but |p| and |mont-&gt;N| are
// public values. |a| must be fully-reduced and may alias with |r|.
//
// Note this function differs from |BN_mod_exp_mont| which uses Montgomery
// reduction but takes input and output outside the Montgomery domain. Combine
// this function with |bn_from_montgomery_small| and |bn_to_montgomery_small|
// if necessary.</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/exponentiation.c' l='722' ll='810' type='void bn_mod_exp_mont_small(uint64_t * r, const uint64_t * a, size_t num, const uint64_t * p, size_t num_p, const BN_MONT_CTX * mont)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/exponentiation.c' l='833' u='c' c='bn_mod_inverse0_prime_mont_small'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_montgomery.c' l='173' u='c' c='ec_GFp_mont_felem_exp'/>
