<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/internal.h' l='704' type='void bn_mod_inverse0_prime_mont_small(uint64_t * r, const uint64_t * a, size_t num, const BN_MONT_CTX * mont)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/internal.h' l='699'>// bn_mod_inverse0_prime_mont_small sets |r| to |a|^-1 mod |mont-&gt;N|. If |a| is
// zero, |r| is set to zero. |mont-&gt;N| must be a prime. |r| and |a| are |num|
// words long, which must be |mont-&gt;N.width| and at most |BN_SMALL_MAX_WORDS|.
// |a| must be fully-reduced and may alias |r|. This function runs in time
// independent of |a|, but |mont-&gt;N| is a public value.</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/exponentiation.c' l='812' ll='834' type='void bn_mod_inverse0_prime_mont_small(uint64_t * r, const uint64_t * a, size_t num, const BN_MONT_CTX * mont)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_montgomery.c' l='126' u='c' c='ec_GFp_mont_felem_inv0'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/scalar.c' l='144' u='c' c='ec_simple_scalar_inv0_montgomery'/>
