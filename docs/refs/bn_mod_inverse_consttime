<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/internal.h' l='616' type='int bn_mod_inverse_consttime(BIGNUM * r, int * out_no_inverse, const BIGNUM * a, const BIGNUM * n, BN_CTX * ctx)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/internal.h' l='608'>// bn_mod_inverse_consttime sets |r| to |a|^-1, mod |n|. |a| must be non-
// negative and less than |n|. It returns one on success and zero on error. On
// failure, if the failure was caused by |a| having no inverse mod |n| then
// |*out_no_inverse| will be set to one; otherwise it will be set to zero.
//
// This function treats both |a| and |n| as secret, provided they are both non-
// zero and the inverse exists. It should only be used for even moduli where
// none of the less general implementations are applicable.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/gcd.c' l='310' u='c' c='BN_mod_inverse'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/gcd_extra.c' l='169' ll='325' type='int bn_mod_inverse_consttime(BIGNUM * r, int * out_no_inverse, const BIGNUM * a, const BIGNUM * n, BN_CTX * ctx)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/rsa/rsa_impl.c' l='1257' u='c' c='rsa_generate_key_impl'/>
