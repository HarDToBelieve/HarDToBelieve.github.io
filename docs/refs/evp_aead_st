<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/base.h' l='404'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/internal.h' l='77' ll='113'/>
<size>72</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/internal.h' l='76'>// EVP_AEAD represents a specific AEAD algorithm.</doc>
<mbr r='evp_aead_st::key_len' o='0' t='uint8_t'/>
<mbr r='evp_aead_st::nonce_len' o='8' t='uint8_t'/>
<mbr r='evp_aead_st::overhead' o='16' t='uint8_t'/>
<mbr r='evp_aead_st::max_tag_len' o='24' t='uint8_t'/>
<mbr r='evp_aead_st::seal_scatter_supports_extra_in' o='32' t='int'/>
<mbr r='evp_aead_st::init' o='64' t='int (*)(EVP_AEAD_CTX *, const uint8_t *, size_t, size_t)'/>
<mbr r='evp_aead_st::init_with_direction' o='128' t='int (*)(EVP_AEAD_CTX *, const uint8_t *, size_t, size_t, enum evp_aead_direction_t)'/>
<mbr r='evp_aead_st::cleanup' o='192' t='void (*)(EVP_AEAD_CTX *)'/>
<mbr r='evp_aead_st::open' o='256' t='int (*)(const EVP_AEAD_CTX *, uint8_t *, size_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t)'/>
<mbr r='evp_aead_st::seal_scatter' o='320' t='int (*)(const EVP_AEAD_CTX *, uint8_t *, uint8_t *, size_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t)'/>
<mbr r='evp_aead_st::open_gather' o='384' t='int (*)(const EVP_AEAD_CTX *, uint8_t *, const uint8_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t)'/>
<mbr r='evp_aead_st::get_iv' o='448' t='int (*)(const EVP_AEAD_CTX *, const uint8_t **, size_t *)'/>
<mbr r='evp_aead_st::tag_len' o='512' t='size_t (*)(const EVP_AEAD_CTX *, size_t, size_t)'/>
