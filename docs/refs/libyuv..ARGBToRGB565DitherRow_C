<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libyuv/include/libyuv/row.h' l='2644' type='void libyuv::ARGBToRGB565DitherRow_C(const uint8_t * src_argb, uint8_t * dst_rgb, const uint32_t dither4, int width)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libyuv/source/convert_argb.cc' l='5108' u='r' c='libyuv::I420ToRGB565Dither'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libyuv/source/convert_from_argb.cc' l='1422' u='r' c='libyuv::ARGBToRGB565Dither'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libyuv/source/row_common.cc' l='326' ll='352' type='void libyuv::ARGBToRGB565DitherRow_C(const uint8_t * src_argb, uint8_t * dst_rgb, const uint32_t dither4, int width)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libyuv/source/row_common.cc' l='318'>// dither4 is a row of 4 values from 4x4 dither matrix.
// The 4x4 matrix contains values to increase RGB.  When converting to
// fewer bits (565) this provides an ordered dither.
// The order in the 4x4 matrix in first byte is upper left.
// The 4 values are passed as an int, then referenced as an array, so
// endian will not affect order of the original matrix.  But the dither4
// will containing the first pixel in the lower byte for little endian
// or the upper byte for big endian.</doc>
