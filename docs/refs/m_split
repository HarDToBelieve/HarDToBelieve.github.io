<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/user_mbuf.h' l='108' type='struct mbuf * m_split(struct mbuf * , int , int )'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_input.c' l='2681' u='c' c='sctp_handle_cookie_echo'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/user_mbuf.c' l='1489' ll='1545' type='struct mbuf * m_split(struct mbuf * m0, int len0, int wait)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/user_mbuf.c' l='1513' u='c' c='m_split'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/user_mbuf.c' l='1479'>/*
 * Partition an mbuf chain in two pieces, returning the tail --
 * all but the first len0 bytes.  In case of failure, it returns NULL and
 * attempts to restore the chain to its original state.
 *
 * Note that the resulting mbufs might be read-only, because the new
 * mbuf can end up sharing an mbuf cluster with the original mbuf if
 * the &quot;breaking point&quot; happens to lie within a cluster mbuf. Use the
 * M_WRITABLE() macro to check for this case.
 */</doc>
