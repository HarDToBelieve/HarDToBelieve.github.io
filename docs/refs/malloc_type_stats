<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/user_malloc.h' l='84' ll='93'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/user_malloc.h' l='100'/>
<size>64</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/user_malloc.h' l='68'>/*
 * Two malloc type structures are present: malloc_type, which is used by a
 * type owner to declare the type, and malloc_type_internal, which holds
 * malloc-owned statistics and other ABI-sensitive fields, such as the set of
 * malloc statistics indexed by the compile-time MAXCPU constant.
 * Applications should avoid introducing dependence on the allocator private
 * data layout and size.
 *
 * The malloc_type ks_next field is protected by malloc_mtx.  Other fields in
 * malloc_type are static after initialization so unsynchronized.
 *
 * Statistics in malloc_type_stats are written only when holding a critical
 * section and running on the CPU associated with the index into the stat
 * array, but read lock-free resulting in possible (minor) races, which the
 * monitoring app should take into account.
 */</doc>
<mbr r='malloc_type_stats::mts_memalloced' o='0' t='uint64_t'/>
<mbr r='malloc_type_stats::mts_memfreed' o='64' t='uint64_t'/>
<mbr r='malloc_type_stats::mts_numallocs' o='128' t='uint64_t'/>
<mbr r='malloc_type_stats::mts_numfrees' o='192' t='uint64_t'/>
<mbr r='malloc_type_stats::mts_size' o='256' t='uint64_t'/>
<mbr r='malloc_type_stats::_mts_reserved1' o='320' t='uint64_t'/>
<mbr r='malloc_type_stats::_mts_reserved2' o='384' t='uint64_t'/>
<mbr r='malloc_type_stats::_mts_reserved3' o='448' t='uint64_t'/>
