<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network_monitor.h' l='71' ll='113'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network_monitor_factory.h' l='27' c='_ZN3rtc21NetworkMonitorFactory20CreateNetworkMonitorEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.h' l='304'/>
<size>64</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network_monitor.h' l='53'>/*
 * Receives network-change events via |OnNetworksChanged| and signals the
 * networks changed event.
 *
 * Threading consideration:
 * It is expected that all upstream operations (from native to Java) are
 * performed from the worker thread. This includes creating, starting and
 * stopping the monitor. This avoids the potential race condition when creating
 * the singleton Java NetworkMonitor class. Downstream operations can be from
 * any thread, but this class will forward all the downstream operations onto
 * the worker thread.
 *
 * Memory consideration:
 * NetworkMonitor is owned by the caller (NetworkManager). The global network
 * monitor factory is owned by the PeerConnectionFactory.
 */
// Generic network monitor interface. It starts and stops monitoring network
// changes, and fires the SignalNetworksChanged event when networks change.</doc>
<fun r='_ZN3rtc23NetworkMonitorInterfaceC1Ev'/>
<fun r='_ZN3rtc23NetworkMonitorInterfaceD1Ev'/>
<mbr r='rtc::NetworkMonitorInterface::SignalNetworksChanged' o='64' t='sigslot::signal0&lt;&gt;'/>
<fun r='_ZN3rtc23NetworkMonitorInterface5StartEv'/>
<fun r='_ZN3rtc23NetworkMonitorInterface4StopEv'/>
<fun r='_ZN3rtc23NetworkMonitorInterface14GetAdapterTypeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE'/>
<fun r='_ZN3rtc23NetworkMonitorInterface27GetVpnUnderlyingAdapterTypeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE'/>
<fun r='_ZN3rtc23NetworkMonitorInterface20GetNetworkPreferenceERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE'/>
<fun r='_ZNK3rtc23NetworkMonitorInterface27SupportsBindSocketToNetworkEv'/>
<fun r='_ZN3rtc23NetworkMonitorInterface19BindSocketToNetworkEiRKNS_9IPAddressERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE'/>
<fun r='_ZN3rtc23NetworkMonitorInterface18IsAdapterAvailableERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE'/>
<def f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/network_monitor.h' l='71' ll='113'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/network_monitor_factory.h' l='27' c='_ZN3rtc21NetworkMonitorFactory20CreateNetworkMonitorEv'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/network.h' l='304'/>
<size>64</size>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/network_monitor.h' l='53'>/*
 * Receives network-change events via |OnNetworksChanged| and signals the
 * networks changed event.
 *
 * Threading consideration:
 * It is expected that all upstream operations (from native to Java) are
 * performed from the worker thread. This includes creating, starting and
 * stopping the monitor. This avoids the potential race condition when creating
 * the singleton Java NetworkMonitor class. Downstream operations can be from
 * any thread, but this class will forward all the downstream operations onto
 * the worker thread.
 *
 * Memory consideration:
 * NetworkMonitor is owned by the caller (NetworkManager). The global network
 * monitor factory is owned by the PeerConnectionFactory.
 */
// Generic network monitor interface. It starts and stops monitoring network
// changes, and fires the SignalNetworksChanged event when networks change.</doc>
<fun r='_ZN3rtc23NetworkMonitorInterfaceC1Ev'/>
<fun r='_ZN3rtc23NetworkMonitorInterfaceD1Ev'/>
<mbr r='rtc::NetworkMonitorInterface::SignalNetworksChanged' o='64' t='sigslot::signal0&lt;&gt;'/>
<fun r='_ZN3rtc23NetworkMonitorInterface5StartEv'/>
<fun r='_ZN3rtc23NetworkMonitorInterface4StopEv'/>
<fun r='_ZN3rtc23NetworkMonitorInterface14GetAdapterTypeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE'/>
<fun r='_ZN3rtc23NetworkMonitorInterface27GetVpnUnderlyingAdapterTypeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE'/>
<fun r='_ZN3rtc23NetworkMonitorInterface20GetNetworkPreferenceERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE'/>
<fun r='_ZNK3rtc23NetworkMonitorInterface27SupportsBindSocketToNetworkEv'/>
<fun r='_ZN3rtc23NetworkMonitorInterface19BindSocketToNetworkEiRKNS_9IPAddressERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE'/>
<fun r='_ZN3rtc23NetworkMonitorInterface18IsAdapterAvailableERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE'/>
