<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/synchronization/yield_policy.h' l='22' ll='34'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/synchronization/yield_policy.h' l='25' c='_ZN3rtc17ScopedYieldPolicyC1ERKS0_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/synchronization/yield_policy.h' l='26' c='_ZN3rtc17ScopedYieldPolicyaSERKS0_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/synchronization/yield_policy.h' l='26' c='_ZN3rtc17ScopedYieldPolicyaSERKS0_'/>
<size>8</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/synchronization/yield_policy.h' l='20'>// Sets the current thread-local yield policy while it&apos;s in scope and reverts
// to the previous policy when it leaves the scope.</doc>
<fun r='_ZN3rtc17ScopedYieldPolicyC1EPNS_14YieldInterfaceE'/>
<fun r='_ZN3rtc17ScopedYieldPolicyC1ERKS0_'/>
<fun r='_ZN3rtc17ScopedYieldPolicyaSERKS0_'/>
<fun r='_ZN3rtc17ScopedYieldPolicyD1Ev'/>
<fun r='_ZN3rtc17ScopedYieldPolicy14YieldExecutionEv'/>
<mbr r='rtc::ScopedYieldPolicy::previous_' o='0' t='rtc::YieldInterface *const'/>
