<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/opus/src/silk/SigProc_FIX.h' l='104' type='void silk_biquad_alt_stride1(const opus_int16 * in, const opus_int32 * B_Q28, const opus_int32 * A_Q28, opus_int32 * S, opus_int16 * out, const opus_int32 len)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/opus/src/silk/SigProc_FIX.h' l='99'>/*!
 * second order ARMA filter;
 * slower than biquad() but uses more precise coefficients
 * can handle (slowly) varying coefficients
 */</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/opus/src/silk/LP_variable_cutoff.c' l='133' u='c' c='silk_LP_variable_cutoff'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/opus/src/silk/biquad_alt.c' l='42' ll='77' type='void silk_biquad_alt_stride1(const opus_int16 * in, const opus_int32 * B_Q28, const opus_int32 * A_Q28, opus_int32 * S, opus_int16 * out, const opus_int32 len)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/opus/src/silk/biquad_alt.c' l='41'>/* Second order ARMA filter, alternative implementation */</doc>
