<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libsrtp/crypto/include/rdbx.h' l='168' type='void srtp_index_init(srtp_xtd_seq_num_t * pi)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libsrtp/crypto/include/rdbx.h' l='167'>/* index_init(&amp;pi) initializes a packet index pi (sets it to zero) */</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libsrtp/crypto/replay/rdbx.c' l='89' ll='96' type='void srtp_index_init(srtp_xtd_seq_num_t * pi)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libsrtp/crypto/replay/rdbx.c' l='185' u='c' c='srtp_rdbx_init'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libsrtp/crypto/replay/rdbx.c' l='66'>/*
 * rdbx implementation notes
 *
 * A srtp_xtd_seq_num_t is essentially a sequence number for which some of
 * the data on the wire are implicit.  It logically consists of a
 * rollover counter and a sequence number; the sequence number is the
 * explicit part, and the rollover counter is the implicit part.
 *
 * Upon receiving a sequence_number (e.g. in a newly received SRTP
 * packet), the complete srtp_xtd_seq_num_t can be estimated by using a
 * local srtp_xtd_seq_num_t as a basis.  This is done using the function
 * srtp_index_guess(&amp;local, &amp;guess, seq_from_packet).  This function
 * returns the difference of the guess and the local value.  The local
 * srtp_xtd_seq_num_t can be moved forward to the guess using the function
 * srtp_index_advance(&amp;guess, delta), where delta is the difference.
 *
 *
 * A srtp_rdbx_t consists of a srtp_xtd_seq_num_t and a bitmask.  The index is
 * highest sequence number that has been received, and the bitmask indicates
 * which of the recent indicies have been received as well.  The
 * highest bit in the bitmask corresponds to the index in the bitmask.
 */</doc>
