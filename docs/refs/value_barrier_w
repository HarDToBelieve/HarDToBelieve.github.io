<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/internal.h' l='268' ll='273' type='crypto_word_t value_barrier_w(crypto_word_t a)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/internal.h' l='409' u='c' c='constant_time_select_w'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/internal.h' l='409' u='c' c='constant_time_select_w'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/internal.h' l='261'>// value_barrier_w returns |a|, but prevents GCC and Clang from reasoning about
// the returned value. This is used to mitigate compilers undoing constant-time
// code, until we can express our requirements directly in the language.
//
// Note the compiler is aware that |value_barrier_w| has no side effects and
// always has the same output for a given input. This allows it to eliminate
// dead code, move computations across loops, and vectorize.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cipher_extra/tls_cbc.c' l='242' u='c' c='EVP_sha1_final_with_secret_suffix'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cipher_extra/tls_cbc.c' l='243' u='c' c='EVP_sha1_final_with_secret_suffix'/>
