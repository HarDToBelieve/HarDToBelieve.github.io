<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/bn.h' l='411' type='int BN_div(BIGNUM * quotient, BIGNUM * rem, const BIGNUM * numerator, const BIGNUM * divisor, BN_CTX * ctx)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/bn.h' l='406'>// BN_div divides |numerator| by |divisor| and places the result in |quotient|
// and the remainder in |rem|. Either of |quotient| or |rem| may be NULL, in
// which case the respective value is not returned. The result is rounded
// towards zero; thus if |numerator| is negative, the remainder will be zero or
// negative. It returns one on success or zero on error.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa.c' l='368' macro='1' u='c' c='DSA_generate_parameters_ex'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa.c' l='404' u='c' c='DSA_generate_parameters_ex'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa.c' l='732' macro='1' u='c' c='DSA_do_check_signature'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa.c' l='875' macro='1' u='c' c='dsa_sign_setup'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/div.c' l='194' ll='400' type='int BN_div(BIGNUM * quotient, BIGNUM * rem, const BIGNUM * numerator, const BIGNUM * divisor, BN_CTX * ctx)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/div.c' l='403' macro='1' u='c' c='BN_nnmod'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/div.c' l='669' macro='1' u='c' c='BN_mod_sqr'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/div.c' l='178'>// BN_div computes &quot;quotient := numerator / divisor&quot;, rounding towards zero,
// and sets up |rem| such that &quot;quotient * divisor + rem = numerator&quot; holds.
//
// Thus:
//
//     quotient-&gt;neg == numerator-&gt;neg ^ divisor-&gt;neg
//        (unless the result is zero)
//     rem-&gt;neg == numerator-&gt;neg
//        (unless the remainder is zero)
//
// If |quotient| or |rem| is NULL, the respective value is not returned.
//
// This was specifically designed to contain fewer branches that may leak
// sensitive information; see &quot;New Branch Prediction Vulnerabilities in OpenSSL
// and Necessary Software Countermeasures&quot; by Onur Acıçmez, Shay Gueron, and
// Jean-Pierre Seifert.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/exponentiation.c' l='229' u='c' c='BN_reciprocal'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/montgomery.c' l='230' macro='1' u='c' c='BN_MONT_CTX_set'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/prime.c' l='957' macro='1' u='c' c='probable_prime_dh'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/prime.c' l='1016' macro='1' u='c' c='probable_prime_dh_safe'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/sqrt.c' l='463' u='c' c='BN_sqrt'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/dh/check.c' l='162' u='c' c='DH_check'/>
