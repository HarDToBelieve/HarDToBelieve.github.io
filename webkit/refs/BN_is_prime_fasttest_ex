<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/bn.h' l='759' type='int BN_is_prime_fasttest_ex(const BIGNUM * candidate, int checks, BN_CTX * ctx, int do_trial_division, BN_GENCB * cb)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/bn.h' l='746'>// BN_is_prime_fasttest_ex returns one if |candidate| is probably a prime
// number by the Miller-Rabin test, zero if it&apos;s certainly not and -1 on error.
//
// If |do_trial_division| is non-zero then |candidate| will be tested against a
// list of small primes before Miller-Rabin tests. The probability of this
// function returning one when |candidate| is composite is at most 2^{2*checks}.
// See |BN_prime_checks_for_validation| and |BN_prime_checks_for_generation| for
// recommended values of |checks|.
//
// If |cb| is not NULL then it is called during the checking process. See the
// comment above |BN_GENCB|.
//
// WARNING: deprecated. Use |BN_primality_test|.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa.c' l='308' u='c' c='DSA_generate_parameters_ex'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa.c' l='377' u='c' c='DSA_generate_parameters_ex'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/prime.c' l='433' u='c' c='BN_generate_prime_ex'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/prime.c' l='452' u='c' c='BN_generate_prime_ex'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/prime.c' l='459' u='c' c='BN_generate_prime_ex'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/prime.c' l='780' u='c' c='BN_is_prime_ex'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/prime.c' l='783' ll='791' type='int BN_is_prime_fasttest_ex(const BIGNUM * a, int checks, BN_CTX * ctx, int do_trial_division, BN_GENCB * cb)'/>
