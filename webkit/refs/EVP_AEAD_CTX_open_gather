<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/aead.h' l='379' type='int EVP_AEAD_CTX_open_gather(const EVP_AEAD_CTX * ctx, uint8_t * out, const uint8_t * nonce, size_t nonce_len, const uint8_t * in, size_t in_len, const uint8_t * in_tag, size_t in_tag_len, const uint8_t * ad, size_t ad_len)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/aead.h' l='364'>// EVP_AEAD_CTX_open_gather decrypts and authenticates |in_len| bytes from |in|
// and authenticates |ad_len| bytes from |ad| using |in_tag_len| bytes of
// authentication tag from |in_tag|. If successful, it writes |in_len| bytes of
// plaintext to |out|. It returns one on success and zero otherwise.
//
// This function may be called concurrently with itself or any other seal/open
// function on the same |EVP_AEAD_CTX|.
//
// The length of |nonce|, |nonce_len|, must be equal to the result of
// |EVP_AEAD_nonce_length| for this AEAD.
//
// |EVP_AEAD_CTX_open_gather| never results in a partial output. If any error
// occurs, |out| will be filled with zero bytes.
//
// If |in| and |out| alias then |out| must be == |in|.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/aead.c' l='214' u='c' c='EVP_AEAD_CTX_open'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/aead.c' l='229' ll='255' type='int EVP_AEAD_CTX_open_gather(const EVP_AEAD_CTX * ctx, uint8_t * out, const uint8_t * nonce, size_t nonce_len, const uint8_t * in, size_t in_len, const uint8_t * in_tag, size_t in_tag_len, const uint8_t * ad, size_t ad_len)'/>
