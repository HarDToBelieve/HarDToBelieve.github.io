<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/base64.h' l='81' type='size_t EVP_EncodeBlock(uint8_t * dst, const uint8_t * src, size_t src_len)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/base64/base64.c' l='152' u='c' c='EVP_EncodeUpdate'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/base64/base64.c' l='163' u='c' c='EVP_EncodeUpdate'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/base64/base64.c' l='199' u='c' c='EVP_EncodeFinal'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/base64/base64.c' l='210' ll='240' type='size_t EVP_EncodeBlock(uint8_t * dst, const uint8_t * src, size_t src_len)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/base64.h' l='67'>// base64 functions.
//
// For historical reasons, these functions have the EVP_ prefix but just do
// base64 encoding and decoding. Note that BoringSSL is a cryptography library,
// so these functions are implemented with side channel protections, at a
// performance cost. For other base64 uses, use a general-purpose base64
// implementation.


// Encoding

// EVP_EncodeBlock encodes |src_len| bytes from |src| and writes the
// result to |dst| with a trailing NUL. It returns the number of bytes
// written, not including this trailing NUL.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/x509spki.c' l='134' u='c' c='NETSCAPE_SPKI_b64_encode'/>
