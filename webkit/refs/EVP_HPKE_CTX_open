<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/hpke.h' l='198' type='int EVP_HPKE_CTX_open(EVP_HPKE_CTX * ctx, uint8_t * out, size_t * out_len, size_t max_out_len, const uint8_t * in, size_t in_len, const uint8_t * ad, size_t ad_len)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c' l='465' ll='487' type='int EVP_HPKE_CTX_open(EVP_HPKE_CTX * ctx, uint8_t * out, size_t * out_len, size_t max_out_len, const uint8_t * in, size_t in_len, const uint8_t * ad, size_t ad_len)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/hpke.h' l='180'>// Using an HPKE context.
//
// Once set up, callers may encrypt or decrypt with an |EVP_HPKE_CTX| using the
// following functions.

// EVP_HPKE_CTX_open uses the HPKE context |ctx| to authenticate |in_len| bytes
// from |in| and |ad_len| bytes from |ad| and to decrypt at most |in_len| bytes
// into |out|. It returns one on success, and zero otherwise.
//
// This operation will fail if the |ctx| context is not set up as a receiver.
//
// Note that HPKE encryption is stateful and ordered. The sender&apos;s first call to
// |EVP_HPKE_CTX_seal| must correspond to the recipient&apos;s first call to
// |EVP_HPKE_CTX_open|, etc.
//
// At most |in_len| bytes are written to |out|. In order to ensure success,
// |max_out_len| should be at least |in_len|. On successful return, |*out_len|
// is set to the actual number of bytes written.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/encrypted_client_hello.cc' l='325' u='c' c='_ZN4bssl24ssl_client_hello_decryptEP15evp_hpke_ctx_stPNS_5ArrayIhEEPbPK22ssl_early_callback_ctxtthNS_4SpanIKhEESB_'/>
