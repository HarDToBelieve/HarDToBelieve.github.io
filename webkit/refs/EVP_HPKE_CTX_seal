<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/hpke.h' l='218' type='int EVP_HPKE_CTX_seal(EVP_HPKE_CTX * ctx, uint8_t * out, size_t * out_len, size_t max_out_len, const uint8_t * in, size_t in_len, const uint8_t * ad, size_t ad_len)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c' l='489' ll='511' type='int EVP_HPKE_CTX_seal(EVP_HPKE_CTX * ctx, uint8_t * out, size_t * out_len, size_t max_out_len, const uint8_t * in, size_t in_len, const uint8_t * ad, size_t ad_len)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/hpke.h' l='203'>// EVP_HPKE_CTX_seal uses the HPKE context |ctx| to encrypt and authenticate
// |in_len| bytes of ciphertext |in| and authenticate |ad_len| bytes from |ad|,
// writing the result to |out|. It returns one on success and zero otherwise.
//
// This operation will fail if the |ctx| context is not set up as a sender.
//
// Note that HPKE encryption is stateful and ordered. The sender&apos;s first call to
// |EVP_HPKE_CTX_seal| must correspond to the recipient&apos;s first call to
// |EVP_HPKE_CTX_open|, etc.
//
// At most, |max_out_len| encrypted bytes are written to |out|. On successful
// return, |*out_len| is set to the actual number of bytes written.
//
// To ensure success, |max_out_len| should be |in_len| plus the result of
// |EVP_HPKE_CTX_max_overhead| or |EVP_HPKE_MAX_OVERHEAD|.</doc>
