<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/hpke.h' l='150' type='int EVP_HPKE_CTX_setup_sender(EVP_HPKE_CTX * ctx, uint8_t * out_enc, size_t * out_enc_len, size_t max_enc, const EVP_HPKE_KEM * kem, const EVP_HPKE_KDF * kdf, const EVP_HPKE_AEAD * aead, const uint8_t * peer_public_key, size_t peer_public_key_len, const uint8_t * info, size_t info_len)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c' l='390' ll='402' type='int EVP_HPKE_CTX_setup_sender(EVP_HPKE_CTX * ctx, uint8_t * out_enc, size_t * out_enc_len, size_t max_enc, const EVP_HPKE_KEM * kem, const EVP_HPKE_KDF * kdf, const EVP_HPKE_AEAD * aead, const uint8_t * peer_public_key, size_t peer_public_key_len, const uint8_t * info, size_t info_len)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/hpke.h' l='136'>// EVP_HPKE_CTX_setup_sender implements the SetupBaseS HPKE operation. It
// encapsulates a shared secret for |peer_public_key| and sets up |ctx| as a
// sender context. It writes the encapsulated shared secret to |out_enc| and
// sets |*out_enc_len| to the number of bytes written. It writes at most
// |max_enc| bytes and fails if the buffer is too small. Setting |max_enc| to at
// least |EVP_HPKE_MAX_ENC_LENGTH| will ensure the buffer is large enough.
//
// This function returns one on success and zero on error. Note that
// |peer_public_key| may be invalid, in which case this function will return an
// error.
//
// On success, callers may call |EVP_HPKE_CTX_seal| to encrypt messages for the
// recipient. Callers must then call |EVP_HPKE_CTX_cleanup| when done. On
// failure, calling |EVP_HPKE_CTX_cleanup| is safe, but not required.</doc>
