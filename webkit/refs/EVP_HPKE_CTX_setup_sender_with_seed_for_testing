<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/hpke.h' l='160' type='int EVP_HPKE_CTX_setup_sender_with_seed_for_testing(EVP_HPKE_CTX * ctx, uint8_t * out_enc, size_t * out_enc_len, size_t max_enc, const EVP_HPKE_KEM * kem, const EVP_HPKE_KDF * kdf, const EVP_HPKE_AEAD * aead, const uint8_t * peer_public_key, size_t peer_public_key_len, const uint8_t * info, size_t info_len, const uint8_t * seed, size_t seed_len)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c' l='399' u='c' c='EVP_HPKE_CTX_setup_sender'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c' l='404' ll='425' type='int EVP_HPKE_CTX_setup_sender_with_seed_for_testing(EVP_HPKE_CTX * ctx, uint8_t * out_enc, size_t * out_enc_len, size_t max_enc, const EVP_HPKE_KEM * kem, const EVP_HPKE_KDF * kdf, const EVP_HPKE_AEAD * aead, const uint8_t * peer_public_key, size_t peer_public_key_len, const uint8_t * info, size_t info_len, const uint8_t * seed, size_t seed_len)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/hpke.h' l='156'>// EVP_HPKE_CTX_setup_sender_with_seed_for_testing behaves like
// |EVP_HPKE_CTX_setup_sender|, but takes a seed to behave deterministically.
// The seed&apos;s format depends on |kem|. For X25519, it is the sender&apos;s
// ephemeral private key.</doc>
