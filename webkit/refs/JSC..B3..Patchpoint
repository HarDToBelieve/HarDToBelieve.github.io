<dec f='webkit/Source/JavaScriptCore/b3/B3Opcode.h' l='299' type='76'/>
<use f='webkit/Source/JavaScriptCore/b3/B3Value.h' l='477' c='_ZN3JSC2B35Value18adjacencyListSpaceENS0_4KindE'/>
<doc f='webkit/Source/JavaScriptCore/b3/B3Opcode.h' l='293'>// This is a patchpoint. Use the PatchpointValue class. This is viewed as behaving like a call,
    // but only emits code via a code generation callback. That callback gets to emit code inline.
    // You can pass a stackmap along with constraints on how each stackmap argument must be passed.
    // It&apos;s legal to request that a stackmap argument is in some register and it&apos;s legal to request
    // that a stackmap argument is at some offset from the top of the argument passing area on the
    // stack.</doc>
<use f='webkit/Source/JavaScriptCore/b3/B3StackmapValue.h' l='57' c='_ZN3JSC2B313StackmapValue7acceptsENS0_4KindE'/>
<use f='webkit/Source/JavaScriptCore/b3/B3PatchpointValue.h' l='40' u='r' c='_ZN3JSC2B315PatchpointValue7acceptsENS0_4KindE'/>
<use f='webkit/Source/JavaScriptCore/b3/B3PatchpointValue.h' l='73' u='r' c='_ZN3JSC2B315PatchpointValue21opcodeFromConstructorENS0_4TypeENS0_6OriginE'/>
<use f='webkit/Source/JavaScriptCore/b3/B3ValueInlines.h' l='167' c='_ZNK3JSC2B35Value19adjacencyListOffsetEv'/>
<use f='webkit/Source/JavaScriptCore/b3/B3ValueInlines.h' l='167' c='_ZNK3JSC2B35Value9cloneImplEv'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_5.cpp' l='235' u='r' c='_Z13testCheckTruev'/>
