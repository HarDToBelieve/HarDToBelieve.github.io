<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/modules/parsers/nasm/nasm-parser.h' l='74' type='295'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/modules/parsers/nasm/nasm-parse.c' l='192' c='describe_token'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/modules/parsers/nasm/nasm-parse.c' l='294' c='parse_line'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/modules/preprocs/nasm/nasm-pp.c' l='55'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/modules/preprocs/nasm/nasm-pp.c' l='179' ll='184'/>
<size>24</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/modules/preprocs/nasm/nasm-pp.c' l='157'>/*
 * Multi-line macro definitions are stored as a linked list of
 * these, which is essentially a container to allow several linked
 * lists of Tokens.
 * 
 * Note that in this module, linked lists are treated as stacks
 * wherever possible. For this reason, Lines are _pushed_ on to the
 * `expansion&apos; field in MMacro structures, so that the linked list,
 * if walked, would give the macro lines in reverse order; this
 * means that we can walk the list when expanding a macro, and thus
 * push the lines on to the `expansion&apos; field in _istk_ in reverse
 * order (so that when popped back off they are in the right
 * order). It may seem cockeyed, and it relies on my design having
 * an even number of steps in, but it works...
 *
 * Some of these structures, rather than being actual lines, are
 * markers delimiting the end of the expansion of a given macro.
 * This is for use in the cycle-tracking and %rep-handling code.
 * Such structures have `finishes&apos; non-NULL, and `first&apos; NULL. All
 * others have `finishes&apos; NULL, but `first&apos; may still be NULL if
 * the line is blank.
 */</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/nasm-token.c' l='222' u='r' c='nasm_parser_lex'/>
