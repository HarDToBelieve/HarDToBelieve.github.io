<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/rsa.h' l='500' type='int RSA_padding_add_PKCS1_PSS_mgf1(const RSA * rsa, uint8_t * EM, const uint8_t * mHash, const EVP_MD * Hash, const EVP_MD * mgf1Hash, int sLen)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/rsa.h' l='488'>// RSA_padding_add_PKCS1_PSS_mgf1 writes a PSS padding of |mHash| to |EM|,
// where |mHash| is a digest produced by |Hash|. |RSA_size(rsa)| bytes of
// output will be written to |EM|. The |mgf1Hash| argument specifies the hash
// function for generating the mask. If NULL, |Hash| is used. The |sLen|
// argument specifies the expected salt length in bytes. If |sLen| is -1 then
// the salt length is the same as the hash length. If -2, then the salt length
// is maximal given the space in |EM|.
//
// It returns one on success or zero on error.
//
// This function implements only the low-level padding logic. Use
// |RSA_sign_pss_mgf1| instead.</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/rsa/padding.c' l='585' ll='695' type='int RSA_padding_add_PKCS1_PSS_mgf1(const RSA * rsa, unsigned char * EM, const unsigned char * mHash, const EVP_MD * Hash, const EVP_MD * mgf1Hash, int sLenRequested)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/rsa/rsa.c' l='566' u='c' c='RSA_sign_pss_mgf1'/>
