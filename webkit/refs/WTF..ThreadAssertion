<def f='webkit/WebKitBuild/Debug/usr/local/include/wtf/ThreadAssertions.h' l='48' ll='65'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/wtf/ThreadAssertions.h' l='59' c='_ZN3WTF15ThreadAssertion5resetEv'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/wtf/ThreadAssertions.h' l='64' c='_ZN3WTF15assertIsCurrentERKNS_15ThreadAssertionE'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/wtf/ThreadAssertions.h' l='67' c='_ZN3WTF15assertIsCurrentERKNS_15ThreadAssertionE'/>
<use f='webkit/Source/WebKit/GPUProcess/graphics/RemoteGraphicsContextGL.h' l='116'/>
<size>4</size>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/wtf/ThreadAssertions.h' l='35'>// A type to use for asserting that private member functions or private member variables
// of a class are accessed from correct threads.
// Supports run-time checking with assertion enabled builds.
// Supports compile-time declaration and checking.
// Example:
// struct MyClass {
//     void doTask() { assertIsCurrent(m_ownerThread); doTaskImpl(); }
//     template&lt;typename&gt; void doTaskCompileFailure() { doTaskImpl(); }
// private:
//     void doTaskImpl() WTF_REQUIRES_LOCK(m_ownerThread);
//     int m_value WTF_GUARDED_BY_LOCK(m_ownerThread) { 0 };
//     NO_UNIQUE_ADDRESS ThreadAssertion m_ownerThread;
// };</doc>
<fun r='_ZN3WTF15ThreadAssertionC1Ev'/>
<fun r='_ZN3WTF15ThreadAssertionC1ENS0_16UninitializedTagE'/>
<fun r='_ZN3WTF15ThreadAssertionD1Ev'/>
<fun r='_ZN3WTF15ThreadAssertion5resetEv'/>
<mbr r='WTF::ThreadAssertion::m_uid' o='0' t='uint32_t'/>
