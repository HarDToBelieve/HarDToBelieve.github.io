<dec f='webkit/Source/JavaScriptCore/API/JSExport.h' l='143'/>
<doc f='webkit/Source/JavaScriptCore/API/JSExport.h' l='115'>/*!
@define
@abstract Rename a selector when it&apos;s exported to JavaScript.
@discussion When a selector that takes one or more arguments is converted to a JavaScript
 property name, by default a property name will be generated by performing the
 following conversion:

  - All colons are removed from the selector

  - Any lowercase letter that had followed a colon will be capitalized.

 Under the default conversion a selector &lt;code&gt;doFoo:withBar:&lt;/code&gt; will be exported as
 &lt;code&gt;doFooWithBar&lt;/code&gt;. The default conversion may be overridden using the JSExportAs
 macro, for example to export a method &lt;code&gt;doFoo:withBar:&lt;/code&gt; as &lt;code&gt;doFoo&lt;/code&gt;:

&lt;pre&gt;
@textblock
    @protocol MyClassJavaScriptMethods &lt;JSExport&gt;
    JSExportAs(doFoo,
    - (void)doFoo:(id)foo withBar:(id)bar
    );
    @end
@/textblock
&lt;/pre&gt;

 Note that the JSExport macro may only be applied to a selector that takes one
 or more argument.
*/</doc>
<use f='webkit/Source/JavaScriptCore/API/tests/testapi.mm' l='101' u='c'/>
<dec f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/Headers/JSExport.h' l='143'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/Headers/JSExport.h' l='115'>/*!
@define
@abstract Rename a selector when it&apos;s exported to JavaScript.
@discussion When a selector that takes one or more arguments is converted to a JavaScript
 property name, by default a property name will be generated by performing the
 following conversion:

  - All colons are removed from the selector

  - Any lowercase letter that had followed a colon will be capitalized.

 Under the default conversion a selector &lt;code&gt;doFoo:withBar:&lt;/code&gt; will be exported as
 &lt;code&gt;doFooWithBar&lt;/code&gt;. The default conversion may be overridden using the JSExportAs
 macro, for example to export a method &lt;code&gt;doFoo:withBar:&lt;/code&gt; as &lt;code&gt;doFoo&lt;/code&gt;:

&lt;pre&gt;
@textblock
    @protocol MyClassJavaScriptMethods &lt;JSExport&gt;
    JSExportAs(doFoo,
    - (void)doFoo:(id)foo withBar:(id)bar
    );
    @end
@/textblock
&lt;/pre&gt;

 Note that the JSExport macro may only be applied to a selector that takes one
 or more argument.
*/</doc>
