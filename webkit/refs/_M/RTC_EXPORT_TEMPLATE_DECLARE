<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/system/rtc_export_template.h' l='85'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='437' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='439' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='441' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='443' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='445' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='447' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='449' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='451' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='453' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='455' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='457' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='459' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='461' u='c'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/stats/rtc_stats.h' l='463' u='c'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/system/rtc_export_template.h' l='14'>// clang-format off
// clang formating would cause cpplint errors in the macros below.

// Most of this was borrowed (with minor modifications) from Chromium&apos;s
// base/export_template.h.

// Synopsis
//
// This header provides macros for using RTC_EXPORT macros with explicit
// template instantiation declarations and definitions.
// Generally, the RTC_EXPORT macros are used at declarations,
// and GCC requires them to be used at explicit instantiation declarations,
// but MSVC requires __declspec(dllexport) to be used at the explicit
// instantiation definitions instead.

// Usage
//
// In a header file, write:
//
//   extern template class RTC_EXPORT_TEMPLATE_DECLARE(RTC_EXPORT) foo&lt;bar&gt;;
//
// In a source file, write:
//
//   template class RTC_EXPORT_TEMPLATE_DEFINE(RTC_EXPORT) foo&lt;bar&gt;;

// Implementation notes
//
// On Windows, when building when RTC_EXPORT expands to __declspec(dllexport)),
// we want the two lines to expand to:
//
//     extern template class foo&lt;bar&gt;;
//     template class RTC_EXPORT foo&lt;bar&gt;;
//
// In all other cases (non-Windows, and Windows when RTC_EXPORT expands to
// __declspec(dllimport)), we want:
//
//     extern template class RTC_EXPORT foo&lt;bar&gt;;
//     template class foo&lt;bar&gt;;
//
// The implementation of this header uses some subtle macro semantics to
// detect what the provided RTC_EXPORT value was defined as and then
// to dispatch to appropriate macro definitions.  Unfortunately,
// MSVC&apos;s C preprocessor is rather non-compliant and requires special
// care to make it work.
//
// Issue 1.
//
//   #define F(x)
//   F()
//
// MSVC emits warning C4003 (&quot;not enough actual parameters for macro
// &apos;F&apos;), even though it&apos;s a valid macro invocation.  This affects the
// macros below that take just an &quot;export&quot; parameter, because export
// may be empty.
//
// As a workaround, we can add a dummy parameter and arguments:
//
//   #define F(x,_)
//   F(,)
//
// Issue 2.
//
//   #define F(x) G##x
//   #define Gj() ok
//   F(j())
//
// The correct replacement for &quot;F(j())&quot; is &quot;ok&quot;, but MSVC replaces it
// with &quot;Gj()&quot;.  As a workaround, we can pass the result to an
// identity macro to force MSVC to look for replacements again.  (This
// is why RTC_EXPORT_TEMPLATE_STYLE_3 exists.)</doc>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/system/rtc_export_template.h' l='85'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='437' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='439' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='441' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='443' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='445' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='447' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='449' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='451' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='453' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='455' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='457' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='459' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='461' u='c'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/stats/rtc_stats.h' l='463' u='c'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/system/rtc_export_template.h' l='14'>// clang-format off
// clang formating would cause cpplint errors in the macros below.

// Most of this was borrowed (with minor modifications) from Chromium&apos;s
// base/export_template.h.

// Synopsis
//
// This header provides macros for using RTC_EXPORT macros with explicit
// template instantiation declarations and definitions.
// Generally, the RTC_EXPORT macros are used at declarations,
// and GCC requires them to be used at explicit instantiation declarations,
// but MSVC requires __declspec(dllexport) to be used at the explicit
// instantiation definitions instead.

// Usage
//
// In a header file, write:
//
//   extern template class RTC_EXPORT_TEMPLATE_DECLARE(RTC_EXPORT) foo&lt;bar&gt;;
//
// In a source file, write:
//
//   template class RTC_EXPORT_TEMPLATE_DEFINE(RTC_EXPORT) foo&lt;bar&gt;;

// Implementation notes
//
// On Windows, when building when RTC_EXPORT expands to __declspec(dllexport)),
// we want the two lines to expand to:
//
//     extern template class foo&lt;bar&gt;;
//     template class RTC_EXPORT foo&lt;bar&gt;;
//
// In all other cases (non-Windows, and Windows when RTC_EXPORT expands to
// __declspec(dllimport)), we want:
//
//     extern template class RTC_EXPORT foo&lt;bar&gt;;
//     template class foo&lt;bar&gt;;
//
// The implementation of this header uses some subtle macro semantics to
// detect what the provided RTC_EXPORT value was defined as and then
// to dispatch to appropriate macro definitions.  Unfortunately,
// MSVC&apos;s C preprocessor is rather non-compliant and requires special
// care to make it work.
//
// Issue 1.
//
//   #define F(x)
//   F()
//
// MSVC emits warning C4003 (&quot;not enough actual parameters for macro
// &apos;F&apos;), even though it&apos;s a valid macro invocation.  This affects the
// macros below that take just an &quot;export&quot; parameter, because export
// may be empty.
//
// As a workaround, we can add a dummy parameter and arguments:
//
//   #define F(x,_)
//   F(,)
//
// Issue 2.
//
//   #define F(x) G##x
//   #define Gj() ok
//   F(j())
//
// The correct replacement for &quot;F(j())&quot; is &quot;ok&quot;, but MSVC replaces it
// with &quot;Gj()&quot;.  As a workaround, we can pass the result to an
// identity macro to force MSVC to look for replacements again.  (This
// is why RTC_EXPORT_TEMPLATE_STYLE_3 exists.)</doc>
