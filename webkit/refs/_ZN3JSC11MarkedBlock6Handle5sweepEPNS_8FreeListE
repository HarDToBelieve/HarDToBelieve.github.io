<dec f='webkit/Source/JavaScriptCore/heap/MarkedBlock.h' l='144' type='void JSC::MarkedBlock::Handle::sweep(JSC::FreeList * )'/>
<doc f='webkit/Source/JavaScriptCore/heap/MarkedBlock.h' l='135'>// Sweeping ensures that destructors get called and removes the block from the unswept
        // set. Sweeping to free list also removes the block from the empty set, if it was in that
        // set. Sweeping with SweepOnly may add this block to the empty set, if the block is found
        // to be empty. The free-list being null implies SweepOnly.
        //
        // Note that you need to make sure that the empty bit reflects reality. If it&apos;s not set
        // and the block is freshly created, then we&apos;ll make the mistake of running destructors in
        // the block. If it&apos;s not set and the block has nothing marked, then we&apos;ll make the
        // mistake of making a pop freelist rather than a bump freelist.</doc>
<dec f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/MarkedBlock.h' l='144' type='void JSC::MarkedBlock::Handle::sweep(JSC::FreeList * )'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/MarkedBlock.h' l='135'>// Sweeping ensures that destructors get called and removes the block from the unswept
        // set. Sweeping to free list also removes the block from the empty set, if it was in that
        // set. Sweeping with SweepOnly may add this block to the empty set, if the block is found
        // to be empty. The free-list being null implies SweepOnly.
        //
        // Note that you need to make sure that the empty bit reflects reality. If it&apos;s not set
        // and the block is freshly created, then we&apos;ll make the mistake of running destructors in
        // the block. If it&apos;s not set and the block has nothing marked, then we&apos;ll make the
        // mistake of making a pop freelist rather than a bump freelist.</doc>
