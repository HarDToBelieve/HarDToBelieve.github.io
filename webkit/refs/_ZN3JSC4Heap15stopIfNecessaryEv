<dec f='webkit/Source/JavaScriptCore/heap/Heap.h' l='363' type='void JSC::Heap::stopIfNecessary()'/>
<doc f='webkit/Source/JavaScriptCore/heap/Heap.h' l='345'>// This is like a super optimized way of saying:
    //
    //     releaseAccess()
    //     acquireAccess()
    //
    // The fast path is an inlined relaxed load and branch. The slow path will block the mutator if
    // the GC wants to do bad things to the heap.
    //
    // All allocations logically call this. As an optimization to improve GC progress, you can call
    // this anywhere that you can afford a load-branch and where an object allocation would have been
    // safe.
    //
    // The GC will also push a stopIfNecessary() event onto the runloop of the thread that
    // instantiated the VM whenever it wants the mutator to stop. This means that if you never block
    // but instead use the runloop to wait for events, then you could safely run in a mode where the
    // mutator has permanent heap access (like the DOM does). If you have good event handling
    // discipline (i.e. you don&apos;t block the runloop) then you can be sure that stopIfNecessary() will
    // already be called for you at the right times.</doc>
<def f='webkit/Source/JavaScriptCore/heap/HeapInlines.h' l='265' ll='272' type='void JSC::Heap::stopIfNecessary()'/>
<dec f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/Heap.h' l='363' type='void JSC::Heap::stopIfNecessary()'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/Heap.h' l='345'>// This is like a super optimized way of saying:
    //
    //     releaseAccess()
    //     acquireAccess()
    //
    // The fast path is an inlined relaxed load and branch. The slow path will block the mutator if
    // the GC wants to do bad things to the heap.
    //
    // All allocations logically call this. As an optimization to improve GC progress, you can call
    // this anywhere that you can afford a load-branch and where an object allocation would have been
    // safe.
    //
    // The GC will also push a stopIfNecessary() event onto the runloop of the thread that
    // instantiated the VM whenever it wants the mutator to stop. This means that if you never block
    // but instead use the runloop to wait for events, then you could safely run in a mode where the
    // mutator has permanent heap access (like the DOM does). If you have good event handling
    // discipline (i.e. you don&apos;t block the runloop) then you can be sure that stopIfNecessary() will
    // already be called for you at the right times.</doc>
<def f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/HeapInlines.h' l='265' ll='272' type='void JSC::Heap::stopIfNecessary()'/>
