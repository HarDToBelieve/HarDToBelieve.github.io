<def f='webkit/Source/JavaScriptCore/runtime/PureNaN.h' l='66' ll='76' type='double JSC::pureNaN()'/>
<use f='webkit/Source/JavaScriptCore/runtime/PureNaN.h' l='78' u='c' c='_ZN3JSC9purifyNaNEd'/>
<use f='webkit/Source/JavaScriptCore/runtime/DateInstanceCache.h' l='45' macro='1' u='c'/>
<use f='webkit/Source/JavaScriptCore/runtime/DateInstanceCache.h' l='47' macro='1' u='c'/>
<use f='webkit/Source/JavaScriptCore/runtime/DateInstanceCache.h' l='64' macro='1' u='c' c='_ZN3JSC17DateInstanceCache5resetEv'/>
<use f='webkit/Source/JavaScriptCore/runtime/ArrayConventions.h' l='149' macro='1' u='c' c='_ZN3JSC10clearArrayEPdj'/>
<doc f='webkit/Source/JavaScriptCore/runtime/PureNaN.h' l='33'>// NaN (not-a-number) double values are central to how JavaScriptCore encodes JavaScript
// values (JSValues).  All values, including integers and non-numeric values, are always
// encoded using the IEEE 754 binary double format.  Non-double values are encoded using
// a NaN with the sign bit set.  The 51-bit payload is then used for encoding the actual
// value - be it an integer or a pointer to an object, or something else. But we only
// make use of the low 49 bits and the top 15 bits being all set to 1 is the indicator
// that a value is not a double. Top 15 bits being set to 1 also indicate a signed
// signaling NaN with some additional NaN payload bits.
//
// Our use of NaN encoding means that we have to be careful with how we use NaNs for
// ordinary doubles. For example, it would be wrong to ever use a NaN that has the top
// 15 bits set, as that would look like a non-double value to JSC.
//
// We can trust that on all of the hardware/OS combinations that we care about,
// NaN-producing math operations never produce a NaN that looks like a tagged value. But
// if we&apos;re ever in a situation where we worry about it, we can use purifyNaN() to get a
// NaN that doesn&apos;t look like a tagged non-double value. The JavaScript language doesn&apos;t
// distinguish between different flavors of NaN and there is no way to detect what kind
// of NaN you have - hence so long as all double NaNs are purified then our tagging
// scheme remains sound.
//
// It&apos;s worth noting that there are cases, like sin(), that will almost produce a NaN
// that breaks us. sin(-inf) returns 0xfff8000000000000. This doesn&apos;t break us because
// not all of the top 15 bits are set. But it&apos;s very close. Hence our assumptions about
// NaN are just about the most aggressive assumptions we could possibly make without
// having to call purifyNaN() in surprising places.
//
// For naming purposes, we say that a NaN is &quot;pure&quot; if it is safe to tag, in the sense
// that doing so would result in a tagged value that would pass the &quot;are you a double&quot;
// test. We say that a NaN is &quot;impure&quot; if attempting to tag it would result in a value
// that would look like something other than a double.

// Returns some kind of pure NaN.</doc>
<use f='webkit/Source/JavaScriptCore/runtime/JSCJSValueInlines.h' l='140' macro='1' u='c' c='_ZN3JSC5jsNaNEv'/>
<use f='webkit/Source/JavaScriptCore/runtime/JSArrayInlines.h' l='103' macro='1' u='c' c='_ZN3JSC8toLengthEPNS_14JSGlobalObjectEPNS_8JSObjectE'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3.h' l='305' macro='1' u='c' c='_Z29populateWithInterestingValuesRN3WTF6VectorI9B3OperandIT_ELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEE'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_1.cpp' l='531' macro='1' u='c' c='_Z3runPKc'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_1.cpp' l='532' macro='1' u='c' c='_Z3runPKc'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_1.cpp' l='533' macro='1' u='c' c='_Z3runPKc'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_1.cpp' l='533' macro='1' u='c' c='_Z3runPKc'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_6.cpp' l='111' macro='1' u='c' c='_Z23testSelectCompareDoublev'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_6.cpp' l='249' macro='1' u='c' c='_Z29testSelectDoubleCompareDoublev'/>
<use f='webkit/Source/JavaScriptCore/b3/testb3_7.cpp' l='1301' macro='1' u='c' c='_Z35testFloatEqualOrUnorderedFoldingNaNv'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGNode.h' l='145' macro='1' u='c' c='_ZN3JSC3DFG12BranchTargetC1Ev'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGNode.h' l='151' macro='1' u='c' c='_ZN3JSC3DFG12BranchTargetC1EPNS0_10BasicBlockE'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h' l='2245' macro='1' u='c' c='_ZN3JSC3DFG19AbstractInterpreter14executeEffectsEjPNS0_4NodeE'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGInsertionSet.h' l='105' macro='1' u='c' c='_ZN3JSC3DFG12InsertionSet26insertBottomConstantForUseEmNS0_10NodeOriginENS0_7UseKindE'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp' l='157' macro='1' u='c' c='_ZN3JSC3DFG14SpeculativeJIT21emitAllocateRawObjectENS_14ARM64Registers10RegisterIDENS0_19RegisteredStructureES3_jj'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp' l='3077' macro='1' u='c' c='_ZN3JSC3DFG14SpeculativeJIT16compileDoubleRepEPNS0_4NodeE'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp' l='14872' macro='1' u='c' c='_ZN3JSC3DFG14SpeculativeJIT31compileAllocateNewArrayWithSizeEPNS_14JSGlobalObjectENS_14ARM64Registers10RegisterIDES5_hb'/>
<use f='webkit/Source/JavaScriptCore/runtime/DateInstance.h' l='91' macro='1' u='c'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp' l='2985' macro='1' u='c' c='_ZN3JSC3DFG14SpeculativeJIT7compileEPNS0_4NodeE'/>
<use f='webkit/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp' l='3712' macro='1' u='c' c='_ZN3JSC3DFG14SpeculativeJIT7compileEPNS0_4NodeE'/>
<use f='webkit/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp' l='1899' macro='1' u='c' c='_ZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB316compileDoubleRepEv'/>
<use f='webkit/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp' l='1963' macro='1' u='c' c='_ZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB315compileValueRepEv'/>
<use f='webkit/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp' l='2963' macro='1' u='c' c='_ZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB320compileArithMinOrMaxEv'/>
<use f='webkit/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp' l='3172' macro='1' u='c' c='_ZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB315compileArithPowEv'/>
<use f='webkit/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp' l='5132' macro='1' u='c' c='_ZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB315compileGetByValEv'/>
<use f='webkit/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp' l='6587' macro='1' u='c' c='_ZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB315compileArrayPopEv'/>
<use f='webkit/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp' l='14124' macro='1' u='c' c='_ZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB323initializeArrayElementsEPNS_2B35ValueES5_S5_S5_'/>
<use f='webkit/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp' l='14132' macro='1' u='c' c='_ZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB323initializeArrayElementsEPNS_2B35ValueES5_S5_S5_'/>
<def f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/PureNaN.h' l='66' ll='76' type='double JSC::pureNaN()'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/PureNaN.h' l='78' u='c' c='_ZN3JSC9purifyNaNEd'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/ArrayConventions.h' l='149' macro='1' u='c' c='_ZN3JSC10clearArrayEPdj'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/DateInstanceCache.h' l='45' macro='1' u='c'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/DateInstanceCache.h' l='47' macro='1' u='c'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/DateInstanceCache.h' l='64' macro='1' u='c' c='_ZN3JSC17DateInstanceCache5resetEv'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/PureNaN.h' l='33'>// NaN (not-a-number) double values are central to how JavaScriptCore encodes JavaScript
// values (JSValues).  All values, including integers and non-numeric values, are always
// encoded using the IEEE 754 binary double format.  Non-double values are encoded using
// a NaN with the sign bit set.  The 51-bit payload is then used for encoding the actual
// value - be it an integer or a pointer to an object, or something else. But we only
// make use of the low 49 bits and the top 15 bits being all set to 1 is the indicator
// that a value is not a double. Top 15 bits being set to 1 also indicate a signed
// signaling NaN with some additional NaN payload bits.
//
// Our use of NaN encoding means that we have to be careful with how we use NaNs for
// ordinary doubles. For example, it would be wrong to ever use a NaN that has the top
// 15 bits set, as that would look like a non-double value to JSC.
//
// We can trust that on all of the hardware/OS combinations that we care about,
// NaN-producing math operations never produce a NaN that looks like a tagged value. But
// if we&apos;re ever in a situation where we worry about it, we can use purifyNaN() to get a
// NaN that doesn&apos;t look like a tagged non-double value. The JavaScript language doesn&apos;t
// distinguish between different flavors of NaN and there is no way to detect what kind
// of NaN you have - hence so long as all double NaNs are purified then our tagging
// scheme remains sound.
//
// It&apos;s worth noting that there are cases, like sin(), that will almost produce a NaN
// that breaks us. sin(-inf) returns 0xfff8000000000000. This doesn&apos;t break us because
// not all of the top 15 bits are set. But it&apos;s very close. Hence our assumptions about
// NaN are just about the most aggressive assumptions we could possibly make without
// having to call purifyNaN() in surprising places.
//
// For naming purposes, we say that a NaN is &quot;pure&quot; if it is safe to tag, in the sense
// that doing so would result in a tagged value that would pass the &quot;are you a double&quot;
// test. We say that a NaN is &quot;impure&quot; if attempting to tag it would result in a value
// that would look like something other than a double.

// Returns some kind of pure NaN.</doc>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/JSCJSValueInlines.h' l='140' macro='1' u='c' c='_ZN3JSC5jsNaNEv'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/JSArrayInlines.h' l='103' macro='1' u='c' c='_ZN3JSC8toLengthEPNS_14JSGlobalObjectEPNS_8JSObjectE'/>
<use f='webkit/Source/WebCore/testing/TypeConversions.h' l='152' u='c' c='_ZNK7WebCore15TypeConversions29testPureNaNUnrestrictedDoubleEv'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/DateInstance.h' l='91' macro='1' u='c'/>
