<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.h' l='52' type='void rtc::OpenSSLAdapter::OpenSSLAdapter(rtc::AsyncSocket * socket, rtc::OpenSSLSessionCache * ssl_session_cache = nullptr, rtc::SSLCertificateVerifier * ssl_cert_verifier = nullptr)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc' l='184' ll='208' type='void rtc::OpenSSLAdapter::OpenSSLAdapter(rtc::AsyncSocket * socket, rtc::OpenSSLSessionCache * ssl_session_cache = nullptr, rtc::SSLCertificateVerifier * ssl_cert_verifier = nullptr)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc' l='1056' u='c' c='_ZN3rtc21OpenSSLAdapterFactory13CreateAdapterEPNS_11AsyncSocketE'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.h' l='46'>// Creating an OpenSSLAdapter requires a socket to bind to, an optional
  // session cache if you wish to improve performance by caching sessions for
  // hostnames you have previously connected to and an optional
  // SSLCertificateVerifier which can override any existing trusted roots to
  // validate a peer certificate. The cache and verifier are effectively
  // immutable after the the SSL connection starts.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/ssl_adapter.cc' l='24' u='c' c='_ZN3rtc10SSLAdapter6CreateEPNS_11AsyncSocketE'/>
