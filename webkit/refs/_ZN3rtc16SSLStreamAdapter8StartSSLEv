<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/ssl_stream_adapter.h' l='176' type='int rtc::SSLStreamAdapter::StartSSL()'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/ssl_stream_adapter.h' l='160'>// StartSSL starts negotiation with a peer, whose certificate is verified
  // using the certificate digest. Generally, SetIdentity() and possibly
  // SetServerRole() should have been called before this.
  // SetPeerCertificateDigest() must also be called. It may be called after
  // StartSSLWithPeer() but must be called before the underlying stream opens.
  //
  // Use of the stream prior to calling StartSSL will pass data in clear text.
  // Calling StartSSL causes SSL negotiation to begin as soon as possible: right
  // away if the underlying wrapped stream is already opened, or else as soon as
  // it opens.
  //
  // StartSSL returns a negative error code on failure. Returning 0 means
  // success so far, but negotiation is probably not complete and will continue
  // asynchronously. In that case, the exposed stream will open after
  // successful negotiation and verification, or an SE_CLOSE event will be
  // raised if negotiation fails.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/dtls_transport.cc' l='711' u='c' c='_ZN7cricket13DtlsTransport14MaybeStartDtlsEv'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc' l='519' c='_ZN3rtc20OpenSSLStreamAdapter8StartSSLEv'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/ssl_stream_adapter.h' l='176' type='int rtc::SSLStreamAdapter::StartSSL()'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/ssl_stream_adapter.h' l='160'>// StartSSL starts negotiation with a peer, whose certificate is verified
  // using the certificate digest. Generally, SetIdentity() and possibly
  // SetServerRole() should have been called before this.
  // SetPeerCertificateDigest() must also be called. It may be called after
  // StartSSLWithPeer() but must be called before the underlying stream opens.
  //
  // Use of the stream prior to calling StartSSL will pass data in clear text.
  // Calling StartSSL causes SSL negotiation to begin as soon as possible: right
  // away if the underlying wrapped stream is already opened, or else as soon as
  // it opens.
  //
  // StartSSL returns a negative error code on failure. Returning 0 means
  // success so far, but negotiation is probably not complete and will continue
  // asynchronously. In that case, the exposed stream will open after
  // successful negotiation and verification, or an SE_CLOSE event will be
  // raised if negotiation fails.</doc>
