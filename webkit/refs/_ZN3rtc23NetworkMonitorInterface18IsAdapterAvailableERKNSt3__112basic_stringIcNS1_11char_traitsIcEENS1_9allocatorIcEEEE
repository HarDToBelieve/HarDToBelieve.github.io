<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network_monitor.h' l='110' ll='112' type='bool rtc::NetworkMonitorInterface::IsAdapterAvailable(const std::string &amp; interface_name)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network_monitor.h' l='101'>// Is this interface available to use? WebRTC shouldn&apos;t attempt to use it if
  // this returns false.
  //
  // It&apos;s possible for this status to change, in which case
  // SignalNetworksChanged will be fired.
  //
  // These specific use case this was added for was a phone with two SIM cards,
  // where attempting to use all interfaces returned from getifaddrs caused the
  // connection to be dropped.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc' l='815' u='c' c='_ZNK3rtc19BasicNetworkManager16IsIgnoredNetworkERKNS_7NetworkE'/>
<def f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/network_monitor.h' l='110' ll='112' type='bool rtc::NetworkMonitorInterface::IsAdapterAvailable(const std::string &amp; interface_name)'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/network_monitor.h' l='101'>// Is this interface available to use? WebRTC shouldn&apos;t attempt to use it if
  // this returns false.
  //
  // It&apos;s possible for this status to change, in which case
  // SignalNetworksChanged will be fired.
  //
  // These specific use case this was added for was a phone with two SIM cards,
  // where attempting to use all interfaces returned from getifaddrs caused the
  // connection to be dropped.</doc>
