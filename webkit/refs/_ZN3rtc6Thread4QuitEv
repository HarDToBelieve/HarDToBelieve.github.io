<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/thread.h' l='285' type='void rtc::Thread::Quit()'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/thread.h' l='279'>// Note: The behavior of Thread has changed.  When a thread is stopped,
  // futher Posts and Sends will fail.  However, any pending Sends and *ready*
  // Posts (as opposed to unexpired delayed Posts) will be delivered before
  // Get (or Peek) returns false.  By guaranteeing delivery of those messages,
  // we eliminate the race condition when an MessageHandler and Thread
  // may be destroyed independently of each other.</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/thread.cc' l='447' ll='450' type='void rtc::Thread::Quit()'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/thread.cc' l='910' u='c' c='_ZN3rtc6Thread4StopEv'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/thread.h' l='285' type='void rtc::Thread::Quit()'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/thread.h' l='279'>// Note: The behavior of Thread has changed.  When a thread is stopped,
  // futher Posts and Sends will fail.  However, any pending Sends and *ready*
  // Posts (as opposed to unexpired delayed Posts) will be delivered before
  // Get (or Peek) returns false.  By guaranteeing delivery of those messages,
  // we eliminate the race condition when an MessageHandler and Thread
  // may be destroyed independently of each other.</doc>
