<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/container/inlined_vector.h' l='194' ll='218' type='void absl::InlinedVector::InlinedVector&lt;T, N, A&gt;(InlinedVector&lt;T, N, A&gt; &amp;&amp; other)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/container/inlined_vector.h' l='180'>// Creates an inlined vector by moving in the contents of `other` without
  // allocating. If `other` contains allocated memory, the newly-created inlined
  // vector will take ownership of that memory. However, if `other` does not
  // contain allocated memory, the newly-created inlined vector will perform
  // element-wise move construction of the contents of `other`.
  //
  // NOTE: since no allocation is performed for the inlined vector in either
  // case, the `noexcept(...)` specification depends on whether moving the
  // underlying objects can throw. It is assumed assumed that...
  //  a) move constructors should only throw due to allocation failure.
  //  b) if `value_type`&apos;s move constructor allocates, it uses the same
  //     allocation function as the inlined vector&apos;s allocator.
  // Thus, the move constructor is non-throwing if the allocator is non-throwing
  // or `value_type`&apos;s move constructor is specified as `noexcept`.</doc>
<def f='webkit/WebKitBuild/Debug/usr/local/include/absl/container/inlined_vector.h' l='194' ll='218' type='void absl::InlinedVector::InlinedVector&lt;T, N, A&gt;(InlinedVector&lt;T, N, A&gt; &amp;&amp; other)'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/absl/container/inlined_vector.h' l='180'>// Creates an inlined vector by moving in the contents of `other` without
  // allocating. If `other` contains allocated memory, the newly-created inlined
  // vector will take ownership of that memory. However, if `other` does not
  // contain allocated memory, the newly-created inlined vector will perform
  // element-wise move construction of the contents of `other`.
  //
  // NOTE: since no allocation is performed for the inlined vector in either
  // case, the `noexcept(...)` specification depends on whether moving the
  // underlying objects can throw. It is assumed assumed that...
  //  a) move constructors should only throw due to allocation failure.
  //  b) if `value_type`&apos;s move constructor allocates, it uses the same
  //     allocation function as the inlined vector&apos;s allocator.
  // Thus, the move constructor is non-throwing if the allocator is non-throwing
  // or `value_type`&apos;s move constructor is specified as `noexcept`.</doc>
