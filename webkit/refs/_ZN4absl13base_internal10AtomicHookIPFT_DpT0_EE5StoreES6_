<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/atomic_hook.h' l='107' ll='111' type='void absl::base_internal::AtomicHook&lt;type-parameter-0-0 (*)(type-parameter-0-1...)&gt;::Store(absl::base_internal::AtomicHook&lt;type-parameter-0-0 (*)(type-parameter-0-1...)&gt;::FnPtr fn)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.cc' l='232' u='c' c='_ZN4absl20raw_logging_internal21RegisterLogPrefixHookEPFbNS_11LogSeverityEPKciPPcPiE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.cc' l='234' u='c' c='_ZN4absl20raw_logging_internal17RegisterAbortHookEPFvPKciS2_S2_S2_E'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.cc' l='237' u='c' c='_ZN4absl20raw_logging_internal27RegisterInternalLogFunctionEPFvNS_11LogSeverityEPKciRKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/atomic_hook.h' l='101'>// Stores the provided function pointer as the value for this hook.
  //
  // This is intended to be called once.  Multiple calls are legal only if the
  // same function pointer is provided for each call.  The store is implemented
  // as a memory_order_release operation, and read accesses are implemented as
  // memory_order_acquire.</doc>
