<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/throw_delegate.h' l='42' type='void absl::base_internal::ThrowStdLogicError(const std::string &amp; what_arg)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/throw_delegate.cc' l='42' ll='49' type='void absl::base_internal::ThrowStdLogicError(const std::string &amp; what_arg)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/throw_delegate.h' l='28'>// Helper functions that allow throwing exceptions consistently from anywhere.
// The main use case is for header-based libraries (eg templates), as they will
// be built by many different targets with their own compiler options.
// In particular, this will allow a safe way to throw exceptions even if the
// caller is compiled with -fno-exceptions.  This is intended for implementing
// things like map&lt;&gt;::at(), which the standard documents as throwing an
// exception on error.
//
// Using other techniques like #if tricks could lead to ODR violations.
//
// You shouldn&apos;t use it unless you&apos;re writing code that you know will be built
// both with and without exceptions and you need to conform to an interface
// that uses exceptions.</doc>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/absl/base/internal/throw_delegate.h' l='42' type='void absl::base_internal::ThrowStdLogicError(const std::string &amp; what_arg)'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/absl/base/internal/throw_delegate.h' l='28'>// Helper functions that allow throwing exceptions consistently from anywhere.
// The main use case is for header-based libraries (eg templates), as they will
// be built by many different targets with their own compiler options.
// In particular, this will allow a safe way to throw exceptions even if the
// caller is compiled with -fno-exceptions.  This is intended for implementing
// things like map&lt;&gt;::at(), which the standard documents as throwing an
// exception on error.
//
// Using other techniques like #if tricks could lead to ODR violations.
//
// You shouldn&apos;t use it unless you&apos;re writing code that you know will be built
// both with and without exceptions and you need to conform to an interface
// that uses exceptions.</doc>
