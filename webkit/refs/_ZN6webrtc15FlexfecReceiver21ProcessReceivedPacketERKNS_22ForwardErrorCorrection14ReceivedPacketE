<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/include/flexfec_receiver.h' l='53' type='void webrtc::FlexfecReceiver::ProcessReceivedPacket(const ForwardErrorCorrection::ReceivedPacket &amp; received_packet)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_receiver.cc' l='76' u='c' c='_ZN6webrtc15FlexfecReceiver11OnRtpPacketERKNS_17RtpPacketReceivedE'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_receiver.cc' l='145' ll='176' type='void webrtc::FlexfecReceiver::ProcessReceivedPacket(const ForwardErrorCorrection::ReceivedPacket &amp; received_packet)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_receiver.cc' l='136'>// Note that the implementation of this member function and the implementation
// in UlpfecReceiver::ProcessReceivedFec() are slightly different.
// This implementation only returns _recovered_ media packets through the
// callback, whereas the implementation in UlpfecReceiver returns _all inserted_
// media packets through the callback. The latter behaviour makes sense
// for ULPFEC, since the ULPFEC receiver is owned by the RtpVideoStreamReceiver.
// Here, however, the received media pipeline is more decoupled from the
// FlexFEC decoder, and we therefore do not interfere with the reception
// of non-recovered media packets.</doc>
