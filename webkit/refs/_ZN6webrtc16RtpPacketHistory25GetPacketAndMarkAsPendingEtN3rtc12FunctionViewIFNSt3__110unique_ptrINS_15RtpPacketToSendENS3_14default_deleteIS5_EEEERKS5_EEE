<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet_history.h' l='103' type='std::unique_ptr&lt;RtpPacketToSend&gt; webrtc::RtpPacketHistory::GetPacketAndMarkAsPending(uint16_t sequence_number, rtc::FunctionView&lt;std::unique_ptr&lt;RtpPacketToSend&gt; (const RtpPacketToSend &amp;)&gt; encapsulate)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet_history.h' l='98'>// In addition to getting packet and marking as sent, this method takes an
  // encapsulator function that takes a reference to the packet and outputs a
  // copy that may be wrapped in a container, eg RTX.
  // If the the encapsulator returns nullptr, the retransmit is aborted and the
  // packet will not be marked as pending.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet_history.cc' l='203' u='c' c='_ZN6webrtc16RtpPacketHistory25GetPacketAndMarkAsPendingEt'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet_history.cc' l='209' ll='241' type='std::unique_ptr&lt;RtpPacketToSend&gt; webrtc::RtpPacketHistory::GetPacketAndMarkAsPending(uint16_t sequence_number, rtc::FunctionView&lt;std::unique_ptr&lt;RtpPacketToSend&gt; (const RtpPacketToSend &amp;)&gt; encapsulate)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender.cc' l='305' u='c' c='_ZN6webrtc9RTPSender12ReSendPacketEt'/>
