<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame_buffer.h' l='70' type='rtc::scoped_refptr&lt;I420BufferInterface&gt; webrtc::VideoFrameBuffer::ToI420()'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame_buffer.h' l='66'>// Returns a memory-backed frame buffer in I420 format. If the pixel data is
  // in another format, a conversion will take place. All implementations must
  // provide a fallback to I420 for compatibility with e.g. the internal WebRTC
  // software encoders.</doc>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/i010_buffer.cc' l='150' c='_ZN6webrtc10I010Buffer6ToI420Ev'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/nv12_buffer.cc' l='76' c='_ZN6webrtc10NV12Buffer6ToI420Ev'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame_buffer.cc' l='28' u='c' c='_ZN6webrtc16VideoFrameBuffer12CropAndScaleEiiiiii'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame_buffer.cc' l='96' c='_ZN6webrtc19I420BufferInterface6ToI420Ev'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video_codecs/video_encoder_software_fallback_wrapper.cc' l='367' u='c' c='_ZN6webrtc12_GLOBAL__N_135VideoEncoderSoftwareFallbackWrapper21EncodeWithMainEncoderERKNS_10VideoFrameEPKNSt3__16vectorINS_14VideoFrameTypeENS5_9allocatorIS7_EEEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/libyuv/webrtc_libyuv.cc' l='81' u='c' c='_ZN6webrtc13ExtractBufferERKNS_10VideoFrameEmPh'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/libyuv/webrtc_libyuv.cc' l='118' u='c' c='_ZN6webrtc15ConvertFromI420ERKNS_10VideoFrameENS_9VideoTypeEiPh'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/libyuv/webrtc_libyuv.cc' l='254' u='c' c='_ZN6webrtc8I420PSNREPKNS_10VideoFrameES2_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/libyuv/webrtc_libyuv.cc' l='255' u='c' c='_ZN6webrtc8I420PSNREPKNS_10VideoFrameES2_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/libyuv/webrtc_libyuv.cc' l='316' u='c' c='_ZN6webrtc8I420SSIMEPKNS_10VideoFrameES2_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/libyuv/webrtc_libyuv.cc' l='317' u='c' c='_ZN6webrtc8I420SSIMEPKNS_10VideoFrameES2_'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/video_frame_buffer.cc' l='116' c='_ZN6webrtc12_GLOBAL__N_114I444BufferBase6ToI420Ev'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/video_frame_buffer.cc' l='187' c='_ZN6webrtc12_GLOBAL__N_114I010BufferBase6ToI420Ev'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc' l='1324' u='c' c='_ZN6webrtc16LibvpxVp8Encoder14PrepareBuffersEN3rtc13scoped_refptrINS_16VideoFrameBufferEEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc' l='1072' u='c' c='_ZN6webrtc16LibvpxVp9Encoder6EncodeERKNS_10VideoFrameEPKNSt3__16vectorINS_14VideoFrameTypeENS4_9allocatorIS6_EEEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc' l='1896' u='c' c='_ZN6webrtc16LibvpxVp9Encoder24PrepareBufferForProfile0EN3rtc13scoped_refptrINS_16VideoFrameBufferEEE'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/native/src/objc_frame_buffer.mm' l='68' c='_ZN6webrtc15ObjCFrameBuffer6ToI420Ev'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/native/src/objc_frame_buffer.mm' l='83' u='c' c='_ZN6webrtc22ToObjCVideoFrameBufferERKN3rtc13scoped_refptrINS_16VideoFrameBufferEEE'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/video/video_frame_buffer.h' l='70' type='rtc::scoped_refptr&lt;I420BufferInterface&gt; webrtc::VideoFrameBuffer::ToI420()'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/video/video_frame_buffer.h' l='66'>// Returns a memory-backed frame buffer in I420 format. If the pixel data is
  // in another format, a conversion will take place. All implementations must
  // provide a fallback to I420 for compatibility with e.g. the internal WebRTC
  // software encoders.</doc>
