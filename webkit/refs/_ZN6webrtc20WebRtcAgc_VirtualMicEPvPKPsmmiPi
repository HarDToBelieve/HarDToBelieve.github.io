<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/legacy/gain_control.h' l='110' type='int webrtc::WebRtcAgc_VirtualMic(void * agcInst, int16_t *const * inMic, size_t num_bands, size_t samples, int32_t micLevelIn, int32_t * micLevelOut)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/legacy/analog_agc.cc' l='284' ll='402' type='int webrtc::WebRtcAgc_VirtualMic(void * agcInst, int16_t *const * in_near, size_t num_bands, size_t samples, int32_t micLevelIn, int32_t * micLevelOut)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/legacy/gain_control.h' l='87'>/*
 * This function replaces the analog microphone with a virtual one.
 * It is a digital gain applied to the input signal and is used in the
 * agcAdaptiveDigital mode where no microphone level is adjustable. The length
 * of the input speech vector must be given in samples (80 when FS=8000, and 160
 * when FS=16000, FS=32000 or FS=48000).
 *
 * Input:
 *      - agcInst           : AGC instance.
 *      - inMic             : Microphone input speech vector for each band
 *      - num_bands         : Number of bands in input vector
 *      - samples           : Number of samples in input vector
 *      - micLevelIn        : Input level of microphone (static)
 *
 * Output:
 *      - inMic             : Microphone output after processing (L band)
 *      - inMic_H           : Microphone output after processing (H band)
 *      - micLevelOut       : Adjusted microphone level after processing
 *
 * Return value:
 *                          :  0 - Normal operation.
 *                          : -1 - Error
 */</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/gain_control_impl.cc' l='181' u='c' c='_ZN6webrtc15GainControlImpl19AnalyzeCaptureAudioERKNS_11AudioBufferE'/>
