<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.h' l='82' type='void webrtc::WebRtcSessionDescriptionFactory::WebRtcSessionDescriptionFactory(rtc::Thread * signaling_thread, cricket::ChannelManager * channel_manager, const webrtc::SdpStateProvider * sdp_info, const std::string &amp; session_id, bool dtls_enabled, std::unique_ptr&lt;rtc::RTCCertificateGeneratorInterface&gt; cert_generator, const rtc::scoped_refptr&lt;rtc::RTCCertificate&gt; &amp; certificate, rtc::UniqueRandomIdGenerator * ssrc_generator, std::function&lt;void (const rtc::scoped_refptr&lt;rtc::RTCCertificate&gt; &amp;)&gt; on_certificate_ready)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.h' l='78'>// Can specify either a |cert_generator| or |certificate| to enable DTLS. If
  // a certificate generator is given, starts generating the certificate
  // asynchronously. If a certificate is given, will use that for identifying
  // over DTLS. If neither is specified, DTLS is disabled.</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.cc' l='127' ll='193' type='void webrtc::WebRtcSessionDescriptionFactory::WebRtcSessionDescriptionFactory(rtc::Thread * signaling_thread, cricket::ChannelManager * channel_manager, const webrtc::SdpStateProvider * sdp_info, const std::string &amp; session_id, bool dtls_enabled, std::unique_ptr&lt;rtc::RTCCertificateGeneratorInterface&gt; cert_generator, const rtc::scoped_refptr&lt;rtc::RTCCertificate&gt; &amp; certificate, rtc::UniqueRandomIdGenerator * ssrc_generator, std::function&lt;void (const rtc::scoped_refptr&lt;rtc::RTCCertificate&gt; &amp;)&gt; on_certificate_ready)'/>
