<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video_codecs/video_encoder_software_fallback_wrapper.h' l='29' type='std::unique_ptr&lt;VideoEncoder&gt; webrtc::CreateVideoEncoderSoftwareFallbackWrapper(std::unique_ptr&lt;VideoEncoder&gt; sw_fallback_encoder, std::unique_ptr&lt;VideoEncoder&gt; hw_encoder, bool prefer_temporal_support)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video_codecs/video_encoder_software_fallback_wrapper.h' l='41' u='c' c='_ZN6webrtc41CreateVideoEncoderSoftwareFallbackWrapperENSt3__110unique_ptrINS_12VideoEncoderENS0_14default_deleteIS2_EEEES5_'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video_codecs/video_encoder_software_fallback_wrapper.cc' l='506' ll='513' type='std::unique_ptr&lt;VideoEncoder&gt; webrtc::CreateVideoEncoderSoftwareFallbackWrapper(std::unique_ptr&lt;VideoEncoder&gt; sw_fallback_encoder, std::unique_ptr&lt;VideoEncoder&gt; hw_encoder, bool prefer_temporal_support)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/video_codecs/video_encoder_software_fallback_wrapper.h' l='22'>// Used to wrap external VideoEncoders to provide a fallback option on
// software encoding when a hardware encoder fails to encode a stream due to
// hardware restrictions, such as max resolution.
// |bool prefer_temporal_support| indicates that if the software fallback
// encoder supports temporal layers but the hardware encoder does not, a
// fallback should be forced even if the encoder otherwise works.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/simulcast_encoder_adapter.cc' l='712' u='c' c='_ZN6webrtc23SimulcastEncoderAdapter27FetchOrCreateEncoderContextEb'/>
