<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/call_stats2.h' l='46' type='webrtc::RtcpRttStats * webrtc::internal::CallStats::AsRtcpRttStats()'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc' l='814' u='c' c='_ZN6webrtc8internal4Call21CreateAudioSendStreamERKNS_15AudioSendStream6ConfigE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc' l='951' u='c' c='_ZN6webrtc8internal4Call21CreateVideoSendStreamENS_15VideoSendStream6ConfigENS_18VideoEncoderConfigENSt3__110unique_ptrINS_13FecControllerENS5_14default_deleteIS7_EEEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc' l='1107' u='c' c='_ZN6webrtc8internal4Call26CreateFlexfecReceiveStreamERKNS_20FlexfecReceiveStream6ConfigE'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/call_stats2.h' l='41'>// Expose an RtcpRttStats implementation without inheriting from RtcpRttStats.
  // That allows us to separate the threading model of how RtcpRttStats is
  // used (mostly on a process thread) and how CallStats is used (mostly on
  // the TQ/worker thread). Since for both cases, there is a LastProcessedRtt()
  // method, this separation allows us to not need a lock for either.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/video_receive_stream2.cc' l='240' u='c' c='_ZN6webrtc8internal19VideoReceiveStream2C1EPNS_16TaskQueueFactoryEPNS_13TaskQueueBaseEPNS_36RtpStreamReceiverControllerInterfaceEiPNS_12PacketRouterEN14270949'/>
