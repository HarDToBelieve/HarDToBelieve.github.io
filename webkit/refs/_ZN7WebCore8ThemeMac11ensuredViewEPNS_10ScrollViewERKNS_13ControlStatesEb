<dec f='webkit/Source/WebCore/platform/mac/ThemeMac.h' l='40' type='static NSView * WebCore::ThemeMac::ensuredView(WebCore::ScrollView * , const WebCore::ControlStates &amp; , bool useUnparentedView = false)'/>
<use f='webkit/Source/WebCore/platform/mac/ThemeMac.mm' l='443' u='c' c='_ZN7WebCoreL17paintToggleButtonENS_11ControlPartERNS_13ControlStatesERNS_15GraphicsContextERKNS_9FloatRectEfPNS_10ScrollViewEf'/>
<use f='webkit/Source/WebCore/platform/mac/ThemeMac.mm' l='585' u='c' c='_ZN7WebCoreL11paintButtonENS_11ControlPartERNS_13ControlStatesERNS_15GraphicsContextERKNS_9FloatRectEfPNS_10ScrollViewEf'/>
<def f='webkit/Source/WebCore/platform/mac/ThemeMac.mm' l='678' ll='695' type='static NSView * WebCore::ThemeMac::ensuredView(WebCore::ScrollView * scrollView, const WebCore::ControlStates &amp; controlStates, bool useUnparentedView = false)'/>
<use f='webkit/Source/WebCore/platform/mac/ThemeMac.mm' l='765' u='c' c='_ZN7WebCoreL14paintColorWellERNS_13ControlStatesERNS_15GraphicsContextERKNS_9FloatRectEfPNS_10ScrollViewEf'/>
<doc f='webkit/Source/WebCore/platform/mac/ThemeMac.mm' l='676'>// This will ensure that we always return a valid NSView, even if ScrollView doesn&apos;t have an associated document NSView.
// If the ScrollView doesn&apos;t have an NSView, we will return a fake NSView set up in the way AppKit expects.</doc>
<use f='webkit/Source/WebCore/rendering/RenderThemeMac.mm' l='284' u='c' c='_ZNK7WebCore14RenderThemeMac15documentViewForERKNS_12RenderObjectE'/>
