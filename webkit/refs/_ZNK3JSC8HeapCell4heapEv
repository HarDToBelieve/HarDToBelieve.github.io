<dec f='webkit/Source/JavaScriptCore/heap/HeapCell.h' l='76' type='JSC::Heap * JSC::HeapCell::heap() const'/>
<doc f='webkit/Source/JavaScriptCore/heap/HeapCell.h' l='70'>// If you want performance and you know that your cell is small, you can do this instead:
    // ASSERT(!cell-&gt;isPreciseAllocation());
    // cell-&gt;markedBlock().vm()
    // We currently only use this hack for callees to make CallFrame::vm() fast. It&apos;s not
    // recommended to use it for too many other things, since the large allocation cutoff is
    // a runtime option and its default value is small (400 bytes).</doc>
<def f='webkit/Source/JavaScriptCore/heap/HeapCellInlines.h' l='57' ll='60' macro='1' type='JSC::Heap * JSC::HeapCell::heap() const'/>
<use f='webkit/Source/JavaScriptCore/heap/HeapInlines.h' l='51' u='c' c='_ZN3JSC4Heap4heapEPKNS_8HeapCellE'/>
<dec f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/HeapCell.h' l='76' type='JSC::Heap * JSC::HeapCell::heap() const'/>
<doc f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/HeapCell.h' l='70'>// If you want performance and you know that your cell is small, you can do this instead:
    // ASSERT(!cell-&gt;isPreciseAllocation());
    // cell-&gt;markedBlock().vm()
    // We currently only use this hack for callees to make CallFrame::vm() fast. It&apos;s not
    // recommended to use it for too many other things, since the large allocation cutoff is
    // a runtime option and its default value is small (400 bytes).</doc>
<def f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/HeapCellInlines.h' l='57' ll='60' macro='1' type='JSC::Heap * JSC::HeapCell::heap() const'/>
<use f='webkit/WebKitBuild/Debug/JavaScriptCore.framework/Versions/A/PrivateHeaders/HeapInlines.h' l='51' u='c' c='_ZN3JSC4Heap4heapEPKNS_8HeapCellE'/>
