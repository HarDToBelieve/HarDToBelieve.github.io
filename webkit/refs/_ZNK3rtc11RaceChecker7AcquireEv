<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/race_checker.h' l='32' type='bool rtc::RaceChecker::Acquire() const'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/race_checker.cc' l='25' ll='35' type='bool rtc::RaceChecker::Acquire() const'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/race_checker.cc' l='43' u='c' c='_ZN3rtc8internal16RaceCheckerScopeC1EPKNS_11RaceCheckerE'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/race_checker.cc' l='17'>// Note that the implementation here is in itself racy, but we pretend it does
// not matter because we want this useful in release builds without having to
// pay the cost of using atomics. A race hitting the race checker is likely to
// cause access_count_ to diverge from zero and therefore cause the ThreadRef
// comparison to fail, signaling a race, although it may not be in the exact
// spot where a race *first* appeared in the code we&apos;re trying to protect. There
// is also a chance that an actual race is missed, however the probability of
// that has been considered small enough to be an acceptable trade off.</doc>
