<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/socket_address.h' l='190' type='size_t rtc::SocketAddress::ToDualStackSockAddrStorage(sockaddr_storage * saddr) const'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/socket_address.h' l='184'>// Read and write the address to/from a sockaddr_storage.
  // Dual stack version always sets family to AF_INET6, and maps v4 addresses.
  // The other version doesn&apos;t map, and outputs an AF_INET address for
  // v4 or mapped addresses, and AF_INET6 addresses for others.
  // Returns the size of the sockaddr_in or sockaddr_in6 structure that is
  // written to the sockaddr_storage, or zero on failure.</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/socket_address.cc' l='307' ll='309' type='size_t rtc::SocketAddress::ToDualStackSockAddrStorage(sockaddr_storage * addr) const'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/socket_address.h' l='190' type='size_t rtc::SocketAddress::ToDualStackSockAddrStorage(sockaddr_storage * saddr) const'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/socket_address.h' l='184'>// Read and write the address to/from a sockaddr_storage.
  // Dual stack version always sets family to AF_INET6, and maps v4 addresses.
  // The other version doesn&apos;t map, and outputs an AF_INET address for
  // v4 or mapped addresses, and AF_INET6 addresses for others.
  // Returns the size of the sockaddr_in or sockaddr_in6 structure that is
  // written to the sockaddr_storage, or zero on failure.</doc>
