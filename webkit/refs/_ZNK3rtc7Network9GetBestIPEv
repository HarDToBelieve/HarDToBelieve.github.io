<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.h' l='378' type='rtc::IPAddress rtc::Network::GetBestIP() const'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.h' l='382' u='c' c='_ZNK3rtc7Network2ipEv'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.h' l='360'>// Returns the Network&apos;s current idea of the &apos;best&apos; IP it has.
  // Or return an unset IP if this network has no active addresses.
  // Here is the rule on how we mark the IPv6 address as ignorable for WebRTC.
  // 1) return all global temporary dynamic and non-deprecated ones.
  // 2) if #1 not available, return global ones.
  // 3) if #2 not available, use ULA ipv6 as last resort. (ULA stands
  // for unique local address, which is not route-able in open
  // internet but might be useful for a close WebRTC deployment.

  // TODO(guoweis): rule #3 actually won&apos;t happen at current
  // implementation. The reason being that ULA address starting with
  // 0xfc 0r 0xfd will be grouped into its own Network. The result of
  // that is WebRTC will have one extra Network to generate candidates
  // but the lack of rule #3 shouldn&apos;t prevent turning on IPv6 since
  // ULA should only be tried in a close deployment anyway.

  // Note that when not specifying any flag, it&apos;s treated as case global
  // IPv6 address</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc' l='600' u='c' c='_ZN7cricket4Port19IsCompatibleAddressERKN3rtc13SocketAddressE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/stun_port.cc' l='219' u='c' c='_ZN7cricket7UDPPort4InitEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/stun_port.cc' l='451' u='c' c='_ZN7cricket7UDPPort15OnResolveResultERKN3rtc13SocketAddressEi'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/tcp_port.cc' l='191' u='c' c='_ZN7cricket7TCPPort14PrepareAddressEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/tcp_port.cc' l='192' u='c' c='_ZN7cricket7TCPPort14PrepareAddressEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/tcp_port.cc' l='294' u='c' c='_ZN7cricket7TCPPort21TryCreateServerSocketEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/tcp_port.cc' l='470' u='c' c='_ZN7cricket13TCPConnection9OnConnectEPN3rtc17AsyncPacketSocketE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/tcp_port.cc' l='575' u='c' c='_ZN7cricket13TCPConnection23CreateOutgoingTcpSocketEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turn_port.cc' l='366' u='c' c='_ZN7cricket8TurnPort14PrepareAddressEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turn_port.cc' l='397' u='c' c='_ZN7cricket8TurnPort22CreateTurnClientSocketEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turn_port.cc' l='419' u='c' c='_ZN7cricket8TurnPort22CreateTurnClientSocketEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turn_port.cc' l='486' u='c' c='_ZN7cricket8TurnPort15OnSocketConnectEPN3rtc17AsyncPacketSocketE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turn_port.cc' l='824' u='c' c='_ZN7cricket8TurnPort15OnResolveResultEPN3rtc22AsyncResolverInterfaceE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='90' u='c' c='_ZN7cricket12_GLOBAL__N_111ComparePortEPKNS_4PortES3_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='91' u='c' c='_ZN7cricket12_GLOBAL__N_111ComparePortEPKNS_4PortES3_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='730' u='c' c='_ZN7cricket25BasicPortAllocatorSession11GetNetworksEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='793' u='c' c='_ZN7cricket25BasicPortAllocatorSession10DoAllocateEb'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='799' u='c' c='_ZN7cricket25BasicPortAllocatorSession10DoAllocateEb'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='1239' u='c' c='_ZN7cricket18AllocationSequence4InitEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='1275' u='c' c='_ZN7cricket18AllocationSequence23DisableEquivalentPhasesEPN3rtc7NetworkEPNS_17PortConfigurationEPj'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='1343' u='c' c='_ZN7cricket18AllocationSequence5StartEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='1527' u='c' c='_ZN7cricket18AllocationSequence14CreateTurnPortERKNS_17RelayServerConfigE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='1533' u='c' c='_ZN7cricket18AllocationSequence14CreateTurnPortERKNS_17RelayServerConfigE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc' l='74' u='c' c='_ZN3rtc12_GLOBAL__N_112SortNetworksEPKNS_7NetworkES3_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc' l='75' u='c' c='_ZN3rtc12_GLOBAL__N_112SortNetworksEPKNS_7NetworkES3_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc' l='460' u='c' c='_ZNK3rtc18NetworkManagerBase22GetDefaultLocalAddressEiPNS_9IPAddressE'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc' l='1045' ll='1080' type='rtc::IPAddress rtc::Network::GetBestIP() const'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc' l='1044'>// Select the best IP address to use from this Network.</doc>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/network.h' l='378' type='rtc::IPAddress rtc::Network::GetBestIP() const'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/network.h' l='382' u='c' c='_ZNK3rtc7Network2ipEv'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/rtc_base/network.h' l='360'>// Returns the Network&apos;s current idea of the &apos;best&apos; IP it has.
  // Or return an unset IP if this network has no active addresses.
  // Here is the rule on how we mark the IPv6 address as ignorable for WebRTC.
  // 1) return all global temporary dynamic and non-deprecated ones.
  // 2) if #1 not available, return global ones.
  // 3) if #2 not available, use ULA ipv6 as last resort. (ULA stands
  // for unique local address, which is not route-able in open
  // internet but might be useful for a close WebRTC deployment.

  // TODO(guoweis): rule #3 actually won&apos;t happen at current
  // implementation. The reason being that ULA address starting with
  // 0xfc 0r 0xfd will be grouped into its own Network. The result of
  // that is WebRTC will have one extra Network to generate candidates
  // but the lack of rule #3 shouldn&apos;t prevent turning on IPv6 since
  // ULA should only be tried in a close deployment anyway.

  // Note that when not specifying any flag, it&apos;s treated as case global
  // IPv6 address</doc>
