<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/atomic_hook.h' l='129' ll='132' type='absl::base_internal::AtomicHook&lt;type-parameter-0-0 (*)(type-parameter-0-1...)&gt;::FnPtr absl::base_internal::AtomicHook&lt;type-parameter-0-0 (*)(type-parameter-0-1...)&gt;::Load() const'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/raw_logging.cc' l='153' u='c' c='_ZN4absl20raw_logging_internal12_GLOBAL__N_18RawLogVAENS_11LogSeverityEPKciS4_Pc'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/base/internal/atomic_hook.h' l='120'>// Returns the registered callback, or nullptr if none has been registered.
  // Useful if client code needs to conditionalize behavior based on whether a
  // callback was registered.
  //
  // Note that atomic_hook.Load()() and atomic_hook() have different semantics:
  // operator()() will perform a no-op if no callback was registered, while
  // Load()() will dereference a null function pointer.  Prefer operator()() to
  // Load()() unless you must conditionalize behavior on whether a hook was
  // registered.</doc>
