<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_header_reader_writer.h' l='78' type='void webrtc::FlexfecHeaderWriter::FinalizeFecHeader(uint32_t media_ssrc, uint16_t seq_num_base, const uint8_t * packet_mask, size_t packet_mask_size, ForwardErrorCorrection::Packet * fec_packet) const'/>
<inh f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/forward_error_correction.h' l='405' c='_ZNK6webrtc15FecHeaderWriter17FinalizeFecHeaderEjtPKhmPNS_22ForwardErrorCorrection6PacketE'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_header_reader_writer.cc' l='251' ll='317' type='void webrtc::FlexfecHeaderWriter::FinalizeFecHeader(uint32_t media_ssrc, uint16_t seq_num_base, const uint8_t * packet_mask, size_t packet_mask_size, ForwardErrorCorrection::Packet * fec_packet) const'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/flexfec_header_reader_writer.cc' l='244'>// This function adapts the precomputed ULPFEC packet masks to the
// FlexFEC header standard. Note that the header size is computed by
// FecHeaderSize(), so in this function we can be sure that we are
// writing in space that is intended for the header.
//
// TODO(brandtr): Update this function when we support offset-based masks,
// retransmissions, and protecting multiple SSRCs.</doc>
