<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/interpolated_gain_curve.h' l='73' type='float webrtc::InterpolatedGainCurve::LookUpGainToApply(float input_level) const'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/interpolated_gain_curve.h' l='69'>// Given a non-negative input level (linear scale), a scalar factor to apply
  // to a sub-frame is returned.
  // Levels above kLimiterMaxInputLevelDbFs will be reduced to 0 dBFS
  // after applying this gain</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/interpolated_gain_curve.cc' l='160' ll='194' type='float webrtc::InterpolatedGainCurve::LookUpGainToApply(float input_level) const'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/interpolated_gain_curve.cc' l='153'>// Looks up a gain to apply given a non-negative input level.
// The cost of this operation depends on the region in which |input_level|
// falls.
// For the identity and the saturation regions the cost is O(1).
// For the other regions, namely knee and limiter, the cost is
// O(2 + log2(|LightkInterpolatedGainCurveTotalPoints|), plus O(1) for the
// linear interpolation (one product and one sum).</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/limiter.cc' l='113' u='c' c='_ZN6webrtc7Limiter7ProcessENS_14AudioFrameViewIfEE'/>
