<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.h' l='194' type='const std::string &amp; cricket::Port::Type() const'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.h' l='189'>// Note that the port type does NOT uniquely identify different subclasses of
  // Port. Use the 2-tuple of the port type AND the protocol (GetProtocol()) to
  // uniquely identify subclasses. Whenever a new subclass of Port introduces a
  // conflit in the value of the 2-tuple, make sure that the implementation that
  // relies on this 2-tuple for RTTI is properly changed.</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc' l='1828' u='c' c='_ZN7cricket19P2PTransportChannel24SwitchSelectedConnectionEPNS_10ConnectionENS_18IceControllerEventE'/>
<inh f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port_interface.h' l='51' c='_ZNK7cricket13PortInterface4TypeEv'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc' l='210' ll='212' type='const std::string &amp; cricket::Port::Type() const'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='948' u='c' c='_ZN7cricket25BasicPortAllocatorSession16OnCandidateReadyEPNS_4PortERKNS_9CandidateE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='996' u='c' c='_ZNK7cricket25BasicPortAllocatorSession25GetBestTurnPortForNetworkERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='1007' u='c' c='_ZN7cricket25BasicPortAllocatorSession26PruneNewlyPairableTurnPortEPNS0_8PortDataE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='1015' u='c' c='_ZN7cricket25BasicPortAllocatorSession26PruneNewlyPairableTurnPortEPNS0_8PortDataE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='1040' u='c' c='_ZN7cricket25BasicPortAllocatorSession14PruneTurnPortsEPNS_4PortE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='1301' u='c' c='_ZN7cricket18AllocationSequence23DisableEquivalentPhasesEPN3rtc7NetworkEPNS_17PortConfigurationEPj'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc' l='1311' u='c' c='_ZN7cricket18AllocationSequence23DisableEquivalentPhasesEPN3rtc7NetworkEPNS_17PortConfigurationEPj'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/p2p/base/port.h' l='194' type='const std::string &amp; cricket::Port::Type() const'/>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/p2p/base/port.h' l='189'>// Note that the port type does NOT uniquely identify different subclasses of
  // Port. Use the 2-tuple of the port type AND the protocol (GetProtocol()) to
  // uniquely identify subclasses. Whenever a new subclass of Port introduces a
  // conflit in the value of the 2-tuple, make sure that the implementation that
  // relies on this 2-tuple for RTTI is properly changed.</doc>
