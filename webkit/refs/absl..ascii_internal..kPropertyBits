<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.h' l='67' type='const unsigned char [256]'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.h' l='81' u='r' c='_ZN4absl13ascii_isalphaEh'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.h' l='88' u='r' c='_ZN4absl13ascii_isalnumEh'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.h' l='96' u='r' c='_ZN4absl13ascii_isspaceEh'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.h' l='103' u='r' c='_ZN4absl13ascii_ispunctEh'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.h' l='110' u='r' c='_ZN4absl13ascii_isblankEh'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.h' l='117' u='r' c='_ZN4absl13ascii_iscntrlEh'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.h' l='125' u='r' c='_ZN4absl14ascii_isxdigitEh'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.cc' l='60' ll='77' type='const unsigned char [256]'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.cc' l='21'>// # Table generated by this Python code (bit 0x02 is currently unused):
// TODO(mbar) Move Python code for generation of table to BUILD and link here.

// NOTE: The kAsciiPropertyBits table used within this code was generated by
// Python code of the following form. (Bit 0x02 is currently unused and
// available.)
//
// def Hex2(n):
//   return &apos;0x&apos; + hex(n/16)[2:] + hex(n%16)[2:]
// def IsPunct(ch):
//   return (ord(ch) &gt;= 32 and ord(ch) &lt; 127 and
//           not ch.isspace() and not ch.isalnum())
// def IsBlank(ch):
//   return ch in &apos; \t&apos;
// def IsCntrl(ch):
//   return ord(ch) &lt; 32 or ord(ch) == 127
// def IsXDigit(ch):
//   return ch.isdigit() or ch.lower() in &apos;abcdef&apos;
// for i in range(128):
//   ch = chr(i)
//   mask = ((ch.isalpha() and 0x01 or 0) |
//           (ch.isalnum() and 0x04 or 0) |
//           (ch.isspace() and 0x08 or 0) |
//           (IsPunct(ch) and 0x10 or 0) |
//           (IsBlank(ch) and 0x20 or 0) |
//           (IsCntrl(ch) and 0x40 or 0) |
//           (IsXDigit(ch) and 0x80 or 0))
//   print Hex2(mask) + &apos;,&apos;,
//   if i % 16 == 7:
//     print &apos; //&apos;, Hex2(i &amp; 0x78)
//   elif i % 16 == 15:
//     print

// clang-format off
// Array of bitfields holding character information. Each bit value corresponds
// to a particular character feature. For readability, and because the value
// of these bits is tightly coupled to this implementation, the individual bits
// are not named. Note that bitfields for all characters above ASCII 127 are
// zero-initialized.</doc>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/abseil-cpp/absl/strings/ascii.h' l='66'>// Declaration for an array of bitfields holding character information.</doc>
