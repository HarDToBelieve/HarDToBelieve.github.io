<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/include/openssl/x509.h' l='988' type='int i2d_X509_AUX(X509 * a, unsigned char ** pp)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/pem/pem_xaux.c' l='65' macro='1' u='c' c='pem_write_bio_X509_AUX_i2d'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/pem/pem_xaux.c' l='65' macro='1' u='c' c='pem_write_X509_AUX_i2d'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/x_x509.c' l='313' ll='338' type='int i2d_X509_AUX(X509 * a, unsigned char ** pp)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/x_x509.c' l='304'>/*
 * Serialize trusted certificate to *pp, or just return the required buffer
 * length if pp == NULL.
 *
 * When pp is not NULL, but *pp == NULL, we allocate the buffer, but since
 * we&apos;re writing two ASN.1 objects back to back, we can&apos;t have i2d_X509() do
 * the allocation, nor can we allow i2d_X509_CERT_AUX() to increment the
 * allocated buffer.
 */</doc>
