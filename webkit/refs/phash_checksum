<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/libyasm/phash.h' l='19' type='void phash_checksum(const char * k, size_t length, unsigned long * state)'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/libyasm/phash.c' l='191' ll='268' type='void phash_checksum(const char * sk, size_t len, unsigned long * state)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/yasm/libyasm/phash.c' l='169'>/*
--------------------------------------------------------------------
checksum() -- hash a variable-length key into a 256-bit value
  k     : the key (the unaligned variable-length array of bytes)
  len   : the length of the key, counting by bytes
  state : an array of CHECKSTATE 4-byte values (256 bits)
The state is the checksum.  Every bit of the key affects every bit of
the state.  There are no funnels.  About 112+6.875len instructions.

If you are hashing n strings (ub1 **)k, do it like this:
  for (i=0; i&lt;8; ++i) state[i] = 0x9e3779b9;
  for (i=0, h=0; i&lt;n; ++i) checksum( k[i], len[i], state);

(c) Bob Jenkins, 1996.  bob_jenkins@burtleburtle.net.  You may use this
code any way you wish, private, educational, or commercial, as long
as this whole comment accompanies it.

See http://burtleburtle.net/bob/hash/evahash.html
Use to detect changes between revisions of documents, assuming nobody
is trying to cause collisions.  Do NOT use for cryptography.
--------------------------------------------------------------------
*/</doc>
