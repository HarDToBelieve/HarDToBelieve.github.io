<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_output.h' l='80' type='void sctp_send_initiate_ack(struct sctp_inpcb * , struct sctp_tcb * , struct sctp_nets * , struct mbuf * , int , int , struct sockaddr * , struct sockaddr * , struct sctphdr * , struct sctp_init_chunk * , uint32_t , uint16_t )'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_input.c' l='177' u='c' c='sctp_handle_init'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_output.c' l='5934' ll='6700' type='void sctp_send_initiate_ack(struct sctp_inpcb * inp, struct sctp_tcb * stcb, struct sctp_nets * src_net, struct mbuf * init_pkt, int iphlen, int offset, struct sockaddr * src, struct sockaddr * dst, struct sctphdr * sh, struct sctp_init_chunk * init_chk, uint32_t vrf_id, uint16_t port)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_output.c' l='5928'>/*
 * Given a MBUF chain that was sent into us containing an INIT. Build a
 * INIT-ACK with COOKIE and send back. We assume that the in_initpkt has done
 * a pullup to include IPv6/4header, SCTP header and initial part of INIT
 * message (i.e. the struct sctp_init_msg).
 */</doc>
