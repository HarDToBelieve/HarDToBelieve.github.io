<dec f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libvpx/source/libvpx/vpx/vpx_decoder.h' l='214' type='vpx_codec_err_t vpx_codec_decode(vpx_codec_ctx_t * ctx, const uint8_t * data, unsigned int data_sz, void * user_priv, long deadline)'/>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libvpx/source/libvpx/vpx/vpx_decoder.h' l='184'>/*!\brief Decode data
 *
 * Processes a buffer of coded data. If the processing results in a new
 * decoded frame becoming available, put_slice and put_frame callbacks may be
 * invoked, as appropriate. Encoded data \ref MUST be passed in DTS (decode
 * time stamp) order. Frames produced will always be in PTS (presentation
 * time stamp) order.
 * If the decoder is configured with VPX_CODEC_USE_INPUT_FRAGMENTS enabled,
 * data and data_sz can contain a fragment of the encoded frame. Fragment
 * \#n must contain at least partition \#n, but can also contain subsequent
 * partitions (\#n+1 - \#n+i), and if so, fragments \#n+1, .., \#n+i must
 * be empty. When no more data is available, this function should be called
 * with NULL as data and 0 as data_sz. The memory passed to this function
 * must be available until the frame has been decoded.
 *
 * \param[in] ctx          Pointer to this instance&apos;s context
 * \param[in] data         Pointer to this block of new coded data. If
 *                         NULL, the put_frame callback is invoked for
 *                         the previously decoded frame.
 * \param[in] data_sz      Size of the coded data, in bytes.
 * \param[in] user_priv    Application specific data to associate with
 *                         this frame.
 * \param[in] deadline     Soft deadline the decoder should attempt to meet,
 *                         in us. Set to zero for unlimited.
 *
 * \return Returns #VPX_CODEC_OK if the coded data was processed completely
 *         and future pictures can be decoded without error. Otherwise,
 *         see the descriptions of the other error codes in ::vpx_codec_err_t
 *         for recoverability capabilities.
 */</doc>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/third_party/libvpx/source/libvpx/vpx/src/vpx_decoder.c' l='104' ll='121' type='vpx_codec_err_t vpx_codec_decode(vpx_codec_ctx_t * ctx, const uint8_t * data, unsigned int data_sz, void * user_priv, long deadline)'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_decoder.cc' l='260' u='c' c='_ZN6webrtc16LibvpxVp8Decoder6DecodeERKNS_12EncodedImageEbx'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_decoder.cc' l='274' u='c' c='_ZN6webrtc16LibvpxVp8Decoder6DecodeERKNS_12EncodedImageEbx'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_decoder.cc' l='245' u='c' c='_ZN6webrtc16LibvpxVp9Decoder6DecodeERKNS_12EncodedImageEbx'/>
