<dec f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/rtp_headers.h' l='77' type='absl::optional&lt;int64_t&gt;'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/rtp_headers.h' l='83' u='r' c='_ZN6webrtceqERKNS_19AbsoluteCaptureTimeES2_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/rtp_headers.h' l='84' u='r' c='_ZN6webrtceqERKNS_19AbsoluteCaptureTimeES2_'/>
<offset>64</offset>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/rtp_headers.h' l='64'>// Estimated capture clock offset is the sender’s estimate of the offset
  // between its own NTP clock and the capture system’s NTP clock. The sender is
  // here defined as the system that owns the NTP clock used to generate the NTP
  // timestamps for the RTCP sender reports on this stream. The sender system is
  // typically either the capture system or a mixer.
  //
  // This field is encoded as a 64-bit two’s complement signed fixed-point
  // number with the high 32 bits for the seconds and low 32 bits for the
  // fractional part. It’s intended to make it easy for a receiver, that knows
  // how to estimate the sender system’s NTP clock, to also estimate the capture
  // system’s NTP clock:
  //
  //   Capture NTP Clock = Sender NTP Clock + Capture Clock Offset</doc>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/absolute_capture_time_receiver.cc' l='68' u='w' c='_ZN6webrtc27AbsoluteCaptureTimeReceiver15OnReceivePacketEjjjRKNSt3__18optionalINS_19AbsoluteCaptureTimeEEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/absolute_capture_time_receiver.cc' l='77' u='r' c='_ZN6webrtc27AbsoluteCaptureTimeReceiver15OnReceivePacketEjjjRKNSt3__18optionalINS_19AbsoluteCaptureTimeEEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/absolute_capture_time_receiver.cc' l='84' u='w' c='_ZN6webrtc27AbsoluteCaptureTimeReceiver15OnReceivePacketEjjjRKNSt3__18optionalINS_19AbsoluteCaptureTimeEEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/absolute_capture_time_receiver.cc' l='85' u='r' c='_ZN6webrtc27AbsoluteCaptureTimeReceiver15OnReceivePacketEjjjRKNSt3__18optionalINS_19AbsoluteCaptureTimeEEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/absolute_capture_time_sender.cc' l='68' u='w' c='_ZN6webrtc25AbsoluteCaptureTimeSender12OnSendPacketEjjjyNSt3__18optionalIxEE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_header_extensions.cc' l='113' u='w' c='_ZN6webrtc28AbsoluteCaptureTimeExtension5ParseEN3rtc9ArrayViewIKhLln4711EEEPNS_19AbsoluteCaptureTimeE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_header_extensions.cc' l='122' u='r' c='_ZN6webrtc28AbsoluteCaptureTimeExtension9ValueSizeERKNS_19AbsoluteCaptureTimeE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_header_extensions.cc' l='138' u='m' c='_ZN6webrtc28AbsoluteCaptureTimeExtension5WriteEN3rtc9ArrayViewIhLln4711EEERKNS_19AbsoluteCaptureTimeE'/>
<dec f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/rtp_headers.h' l='77' type='absl::optional&lt;int64_t&gt;'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/rtp_headers.h' l='83' u='r' c='_ZN6webrtceqERKNS_19AbsoluteCaptureTimeES2_'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/rtp_headers.h' l='84' u='r' c='_ZN6webrtceqERKNS_19AbsoluteCaptureTimeES2_'/>
<offset>64</offset>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/rtp_headers.h' l='64'>// Estimated capture clock offset is the sender’s estimate of the offset
  // between its own NTP clock and the capture system’s NTP clock. The sender is
  // here defined as the system that owns the NTP clock used to generate the NTP
  // timestamps for the RTCP sender reports on this stream. The sender system is
  // typically either the capture system or a mixer.
  //
  // This field is encoded as a 64-bit two’s complement signed fixed-point
  // number with the high 32 bits for the seconds and low 32 bits for the
  // fractional part. It’s intended to make it easy for a receiver, that knows
  // how to estimate the sender system’s NTP clock, to also estimate the capture
  // system’s NTP clock:
  //
  //   Capture NTP Clock = Sender NTP Clock + Capture Clock Offset</doc>
