<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/async_dns_resolver.h' l='41' ll='52'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/async_dns_resolver.h' l='61' c='_ZNK6webrtc25AsyncDnsResolverInterface6resultEv'/>
<size>8</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/api/async_dns_resolver.h' l='22'>// This interface defines the methods to resolve a hostname asynchronously.
// The AsyncDnsResolverInterface class encapsulates a single name query.
//
// Usage:
//   std::unique_ptr&lt;AsyncDnsResolverInterface&gt; resolver =
//        factory-&gt;Create(address-to-be-resolved, [r = resolver.get()]() {
//     if (r-&gt;result.GetResolvedAddress(AF_INET, &amp;addr) {
//       // success
//     } else {
//       // failure
//       error = r-&gt;result().GetError();
//     }
//     // Release resolver.
//     resolver_list.erase(std::remove_if(resolver_list.begin(),
//     resolver_list.end(),
//                         [](refptr) { refptr.get() == r; });
//   });
//   resolver_list.push_back(std::move(resolver));</doc>
<fun r='_ZN6webrtc22AsyncDnsResolverResultD1Ev'/>
<fun r='_ZNK6webrtc22AsyncDnsResolverResult18GetResolvedAddressEiPN3rtc13SocketAddressE'/>
<fun r='_ZNK6webrtc22AsyncDnsResolverResult8GetErrorEv'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.h' l='487' c='_ZN7cricket19P2PTransportChannel28AddRemoteCandidateWithResultENS_9CandidateERKN6webrtc22AsyncDnsResolverResultE'/>
<size>8</size>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_async_resolver_factory.cc' l='29' c='webrtc::WrappingAsyncDnsResolverResult'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_async_resolver_factory.cc' l='29'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_async_resolver_factory.cc' l='70' c='_ZNK6webrtc24WrappingAsyncDnsResolver6resultEv'/>
<size>8</size>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc' l='1315' c='_ZN7cricket19P2PTransportChannel28AddRemoteCandidateWithResultENS_9CandidateERKN6webrtc22AsyncDnsResolverResultE'/>
<size>8</size>
<def f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/async_dns_resolver.h' l='41' ll='52'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/async_dns_resolver.h' l='61' c='_ZNK6webrtc25AsyncDnsResolverInterface6resultEv'/>
<size>8</size>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/api/async_dns_resolver.h' l='22'>// This interface defines the methods to resolve a hostname asynchronously.
// The AsyncDnsResolverInterface class encapsulates a single name query.
//
// Usage:
//   std::unique_ptr&lt;AsyncDnsResolverInterface&gt; resolver =
//        factory-&gt;Create(address-to-be-resolved, [r = resolver.get()]() {
//     if (r-&gt;result.GetResolvedAddress(AF_INET, &amp;addr) {
//       // success
//     } else {
//       // failure
//       error = r-&gt;result().GetError();
//     }
//     // Release resolver.
//     resolver_list.erase(std::remove_if(resolver_list.begin(),
//     resolver_list.end(),
//                         [](refptr) { refptr.get() == r; });
//   });
//   resolver_list.push_back(std::move(resolver));</doc>
<fun r='_ZN6webrtc22AsyncDnsResolverResultD1Ev'/>
<fun r='_ZNK6webrtc22AsyncDnsResolverResult18GetResolvedAddressEiPN3rtc13SocketAddressE'/>
<fun r='_ZNK6webrtc22AsyncDnsResolverResult8GetErrorEv'/>
