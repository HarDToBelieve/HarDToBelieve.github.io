<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/capture_levels_adjuster/capture_levels_adjuster.h' l='33' ll='85'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/capture_levels_adjuster/capture_levels_adjuster.h' l='43' c='_ZN6webrtc21CaptureLevelsAdjusterC1ERKS0_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/capture_levels_adjuster/capture_levels_adjuster.h' l='44' c='_ZN6webrtc21CaptureLevelsAdjusteraSERKS0_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/capture_levels_adjuster/capture_levels_adjuster.h' l='44' c='_ZN6webrtc21CaptureLevelsAdjusteraSERKS0_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.h' l='400'/>
<size>48</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/capture_levels_adjuster/capture_levels_adjuster.h' l='20'>// Adjusts the level of the capture signal before and after all capture-side
// processing is done using a combination of explicitly specified gains
// and an emulated analog gain functionality where a specified analog level
// results in an additional gain. The pre-adjustment is achieved by combining
// the gain value `pre_gain` and the level `emulated_analog_mic_gain_level` to
// form a combined gain of `pre_gain`*`emulated_analog_mic_gain_level`/255 which
// is multiplied to each sample. The intention of the
// `emulated_analog_mic_gain_level` is to be controlled by the analog AGC
// functionality and to produce an emulated analog mic gain equal to
// `emulated_analog_mic_gain_level`/255. The post level adjustment is achieved
// by multiplying each sample with the value of `post_gain`. Any changes in the
// gains take are done smoothly over one frame and the scaled samples are
// clamped to fit into the allowed S16 sample range.</doc>
<fun r='_ZN6webrtc21CaptureLevelsAdjusterC1Ebiff'/>
<fun r='_ZN6webrtc21CaptureLevelsAdjusterC1ERKS0_'/>
<fun r='_ZN6webrtc21CaptureLevelsAdjusteraSERKS0_'/>
<fun r='_ZN6webrtc21CaptureLevelsAdjuster23ApplyPreLevelAdjustmentERNS_11AudioBufferE'/>
<fun r='_ZN6webrtc21CaptureLevelsAdjuster24ApplyPostLevelAdjustmentERNS_11AudioBufferE'/>
<fun r='_ZN6webrtc21CaptureLevelsAdjuster10SetPreGainEf'/>
<fun r='_ZNK6webrtc21CaptureLevelsAdjuster20GetPreAdjustmentGainEv'/>
<fun r='_ZN6webrtc21CaptureLevelsAdjuster11SetPostGainEf'/>
<fun r='_ZN6webrtc21CaptureLevelsAdjuster21SetAnalogMicGainLevelEi'/>
<fun r='_ZNK6webrtc21CaptureLevelsAdjuster21GetAnalogMicGainLevelEv'/>
<fun r='_ZN6webrtc21CaptureLevelsAdjuster23UpdatePreAdjustmentGainEv'/>
<mbr r='webrtc::CaptureLevelsAdjuster::emulated_analog_mic_gain_enabled_' o='0' t='const bool'/>
<mbr r='webrtc::CaptureLevelsAdjuster::emulated_analog_mic_gain_level_' o='32' t='int'/>
<mbr r='webrtc::CaptureLevelsAdjuster::pre_gain_' o='64' t='float'/>
<mbr r='webrtc::CaptureLevelsAdjuster::pre_adjustment_gain_' o='96' t='float'/>
<mbr r='webrtc::CaptureLevelsAdjuster::pre_scaler_' o='128' t='webrtc::AudioSamplesScaler'/>
<mbr r='webrtc::CaptureLevelsAdjuster::post_scaler_' o='256' t='webrtc::AudioSamplesScaler'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc' l='1991' c='_ZN6webrtc19AudioProcessingImpl31InitializeCaptureLevelsAdjusterEv'/>
<size>48</size>
