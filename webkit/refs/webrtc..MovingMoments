<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/transient/moving_moments.h' l='27' ll='49'/>
<size>64</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/transient/moving_moments.h' l='20'>// Calculates the first and second moments for each value of a buffer taking
// into account a given number of previous values.
// It preserves its state, so it can be multiple-called.
// TODO(chadan): Implement a function that takes a buffer of first moments and a
// buffer of second moments; and calculates the variances. When needed.
// TODO(chadan): Add functionality to update with a buffer but only output are
// the last values of the moments. When needed.</doc>
<fun r='_ZN6webrtc13MovingMomentsC1Em'/>
<fun r='_ZN6webrtc13MovingMomentsD1Ev'/>
<fun r='_ZN6webrtc13MovingMoments16CalculateMomentsEPKfmPfS3_'/>
<mbr r='webrtc::MovingMoments::length_' o='0' t='size_t'/>
<mbr r='webrtc::MovingMoments::queue_' o='64' t='std::queue&lt;float&gt;'/>
<mbr r='webrtc::MovingMoments::sum_' o='448' t='float'/>
<mbr r='webrtc::MovingMoments::sum_of_squares_' o='480' t='float'/>
<fun r='_ZN6webrtc13MovingMomentsC1Em'/>
<fun r='_ZN6webrtc13MovingMomentsD1Ev'/>
<fun r='_ZN6webrtc13MovingMoments16CalculateMomentsEPKfmPfS3_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/transient/transient_detector.h' l='64'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/transient/transient_detector.cc' l='58' c='_ZN6webrtc17TransientDetectorC1Ei'/>
<size>64</size>
