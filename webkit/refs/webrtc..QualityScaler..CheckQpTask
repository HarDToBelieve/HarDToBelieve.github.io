<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/quality_scaler.h' l='83'/>
<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/quality_scaler.cc' l='82' ll='183'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/quality_scaler.cc' l='182'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/quality_scaler.cc' l='238' c='_ZN6webrtc13QualityScaler20StartNextCheckQpTaskEv'/>
<size>32</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/quality_scaler.cc' l='74'>// The QualityScaler checks for QP periodically by queuing CheckQpTasks. The
// task will either run to completion and trigger a new task being queued, or it
// will be destroyed because the QualityScaler is destroyed.
//
// When high or low QP is reported, the task will be pending until a callback is
// invoked. This lets the QualityScalerQpUsageHandlerInterface react to QP usage
// asynchronously and prevents checking for QP until the stream has potentially
// been reconfigured.</doc>
<fun r='_ZN6webrtc13QualityScaler11CheckQpTaskC1EPS0_NS1_6ResultE'/>
<fun r='_ZN6webrtc13QualityScaler11CheckQpTask16StartDelayedTaskEv'/>
<fun r='_ZNK6webrtc13QualityScaler11CheckQpTask16HasCompletedTaskEv'/>
<fun r='_ZNK6webrtc13QualityScaler11CheckQpTask6resultEv'/>
<fun r='_ZNK6webrtc13QualityScaler11CheckQpTask20GetCheckingQpDelayMsEv'/>
<mbr r='webrtc::QualityScaler::CheckQpTask::quality_scaler_' o='0' t='webrtc::QualityScaler *const'/>
<mbr r='webrtc::QualityScaler::CheckQpTask::state_' o='64' t='webrtc::QualityScaler::CheckQpTask::State'/>
<mbr r='webrtc::QualityScaler::CheckQpTask::previous_task_result_' o='96' t='const webrtc::QualityScaler::CheckQpTask::Result'/>
<mbr r='webrtc::QualityScaler::CheckQpTask::result_' o='112' t='webrtc::QualityScaler::CheckQpTask::Result'/>
<mbr r='webrtc::QualityScaler::CheckQpTask::weak_ptr_factory_' o='128' t='rtc::WeakPtrFactory&lt;CheckQpTask&gt;'/>
