<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_demuxer.h' l='92' ll='199'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_demuxer.h' l='106' c='_ZN6webrtc10RtpDemuxerC1ERKS0_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_demuxer.h' l='107' c='_ZN6webrtc10RtpDemuxeraSERKS0_'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_stream_receiver_controller.h' l='72'/>
<size>312</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_demuxer.h' l='57'>// This class represents the RTP demuxing, for a single RTP session (i.e., one
// SSRC space, see RFC 7656). It isn&apos;t thread aware, leaving responsibility of
// multithreading issues to the user of this class.
// The demuxing algorithm follows the sketch given in the BUNDLE draft:
// https://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-38#section-10.2
// with modifications to support RTP stream IDs also.
//
// When a packet is received, the RtpDemuxer will route according to the
// following rules:
// 1. If the packet contains the MID header extension, and no sink has been
//    added with that MID as a criteria, the packet is not routed.
// 2. If the packet has the MID header extension, but no RSID or RRID extension,
//    and the MID is bound to a sink, then bind its SSRC to the same sink and
//    forward the packet to that sink. Note that rebinding to the same sink is
//    not an error. (Later packets with that SSRC would therefore be forwarded
//    to the same sink, whether they have the MID header extension or not.)
// 3. If the packet has the MID header extension and either the RSID or RRID
//    extension, and the MID, RSID (or RRID) pair is bound to a sink, then bind
//    its SSRC to the same sink and forward the packet to that sink. Later
//    packets with that SSRC will be forwarded to the same sink.
// 4. If the packet has the RSID or RRID header extension, but no MID extension,
//    and the RSID or RRID is bound to an RSID sink, then bind its SSRC to the
//    same sink and forward the packet to that sink. Later packets with that
//    SSRC will be forwarded to the same sink.
// 5. If the packet&apos;s SSRC is bound to an SSRC through a previous call to
//    AddSink, then forward the packet to that sink. Note that the RtpDemuxer
//    will not verify the payload type even if included in the sink&apos;s criteria.
//    The sink is expected to do the check in its handler.
// 6. If the packet&apos;s payload type is bound to exactly one payload type sink
//    through an earlier call to AddSink, then forward the packet to that sink.
// 7. Otherwise, the packet is not routed.
//
// In summary, the routing algorithm will always try to first match MID and RSID
// (including through SSRC binding), match SSRC directly as needed, and use
// payload types only if all else fails.</doc>
<smbr r='webrtc::RtpDemuxer::kMaxSsrcBindings' t='const int'/>
<fun r='_ZN6webrtc10RtpDemuxer14DescribePacketERKNS_17RtpPacketReceivedE'/>
<fun r='_ZN6webrtc10RtpDemuxerC1Eb'/>
<fun r='_ZN6webrtc10RtpDemuxerD1Ev'/>
<fun r='_ZN6webrtc10RtpDemuxerC1ERKS0_'/>
<fun r='_ZN6webrtc10RtpDemuxeraSERKS0_'/>
<fun r='_ZN6webrtc10RtpDemuxer7AddSinkERKNS_18RtpDemuxerCriteriaEPNS_22RtpPacketSinkInterfaceE'/>
<fun r='_ZN6webrtc10RtpDemuxer7AddSinkEjPNS_22RtpPacketSinkInterfaceE'/>
<fun r='_ZN6webrtc10RtpDemuxer7AddSinkERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_22RtpPacketSinkInterfaceE'/>
<fun r='_ZN6webrtc10RtpDemuxer10RemoveSinkEPKNS_22RtpPacketSinkInterfaceE'/>
<fun r='_ZN6webrtc10RtpDemuxer11OnRtpPacketERKNS_17RtpPacketReceivedE'/>
<fun r='_ZNK6webrtc10RtpDemuxer21CriteriaWouldConflictERKNS_18RtpDemuxerCriteriaE'/>
<fun r='_ZN6webrtc10RtpDemuxer11ResolveSinkERKNS_17RtpPacketReceivedE'/>
<fun r='_ZN6webrtc10RtpDemuxer16ResolveSinkByMidERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj'/>
<fun r='_ZN6webrtc10RtpDemuxer20ResolveSinkByMidRsidERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_j'/>
<fun r='_ZN6webrtc10RtpDemuxer17ResolveSinkByRsidERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj'/>
<fun r='_ZN6webrtc10RtpDemuxer24ResolveSinkByPayloadTypeEhj'/>
<fun r='_ZN6webrtc10RtpDemuxer16RefreshKnownMidsEv'/>
<mbr r='webrtc::RtpDemuxer::sink_by_mid_' o='0' t='std::unordered_map&lt;std::string, RtpPacketSinkInterface *&gt;'/>
<mbr r='webrtc::RtpDemuxer::sink_by_ssrc_' o='320' t='std::unordered_map&lt;uint32_t, RtpPacketSinkInterface *&gt;'/>
<mbr r='webrtc::RtpDemuxer::sinks_by_pt_' o='640' t='std::unordered_multimap&lt;uint8_t, RtpPacketSinkInterface *&gt;'/>
<mbr r='webrtc::RtpDemuxer::sink_by_mid_and_rsid_' o='960' t='std::unordered_map&lt;std::pair&lt;std::string, std::string&gt;, RtpPacketSinkInterface *, webrtc::PairHash&gt;'/>
<mbr r='webrtc::RtpDemuxer::sink_by_rsid_' o='1280' t='std::unordered_map&lt;std::string, RtpPacketSinkInterface *&gt;'/>
<mbr r='webrtc::RtpDemuxer::known_mids_' o='1600' t='std::set&lt;std::string&gt;'/>
<mbr r='webrtc::RtpDemuxer::mid_by_ssrc_' o='1792' t='std::unordered_map&lt;uint32_t, std::string&gt;'/>
<mbr r='webrtc::RtpDemuxer::rsid_by_ssrc_' o='2112' t='std::unordered_map&lt;uint32_t, std::string&gt;'/>
<fun r='_ZN6webrtc10RtpDemuxer18AddSsrcSinkBindingEjPNS_22RtpPacketSinkInterfaceE'/>
<mbr r='webrtc::RtpDemuxer::use_mid_' o='2432' t='const bool'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_transport.h' l='136'/>
<size>312</size>
<def f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/call/rtp_demuxer.h' l='92' ll='199'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/call/rtp_demuxer.h' l='106' c='_ZN6webrtc10RtpDemuxerC1ERKS0_'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/call/rtp_demuxer.h' l='107' c='_ZN6webrtc10RtpDemuxeraSERKS0_'/>
<use f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/pc/rtp_transport.h' l='136'/>
<size>312</size>
<doc f='webkit/WebKitBuild/Debug/usr/local/include/webrtc/call/rtp_demuxer.h' l='57'>// This class represents the RTP demuxing, for a single RTP session (i.e., one
// SSRC space, see RFC 7656). It isn&apos;t thread aware, leaving responsibility of
// multithreading issues to the user of this class.
// The demuxing algorithm follows the sketch given in the BUNDLE draft:
// https://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-38#section-10.2
// with modifications to support RTP stream IDs also.
//
// When a packet is received, the RtpDemuxer will route according to the
// following rules:
// 1. If the packet contains the MID header extension, and no sink has been
//    added with that MID as a criteria, the packet is not routed.
// 2. If the packet has the MID header extension, but no RSID or RRID extension,
//    and the MID is bound to a sink, then bind its SSRC to the same sink and
//    forward the packet to that sink. Note that rebinding to the same sink is
//    not an error. (Later packets with that SSRC would therefore be forwarded
//    to the same sink, whether they have the MID header extension or not.)
// 3. If the packet has the MID header extension and either the RSID or RRID
//    extension, and the MID, RSID (or RRID) pair is bound to a sink, then bind
//    its SSRC to the same sink and forward the packet to that sink. Later
//    packets with that SSRC will be forwarded to the same sink.
// 4. If the packet has the RSID or RRID header extension, but no MID extension,
//    and the RSID or RRID is bound to an RSID sink, then bind its SSRC to the
//    same sink and forward the packet to that sink. Later packets with that
//    SSRC will be forwarded to the same sink.
// 5. If the packet&apos;s SSRC is bound to an SSRC through a previous call to
//    AddSink, then forward the packet to that sink. Note that the RtpDemuxer
//    will not verify the payload type even if included in the sink&apos;s criteria.
//    The sink is expected to do the check in its handler.
// 6. If the packet&apos;s payload type is bound to exactly one payload type sink
//    through an earlier call to AddSink, then forward the packet to that sink.
// 7. Otherwise, the packet is not routed.
//
// In summary, the routing algorithm will always try to first match MID and RSID
// (including through SSRC binding), match SSRC directly as needed, and use
// payload types only if all else fails.</doc>
<smbr r='webrtc::RtpDemuxer::kMaxSsrcBindings' t='const int'/>
<fun r='_ZN6webrtc10RtpDemuxer14DescribePacketERKNS_17RtpPacketReceivedE'/>
<fun r='_ZN6webrtc10RtpDemuxerC1Eb'/>
<fun r='_ZN6webrtc10RtpDemuxerD1Ev'/>
<fun r='_ZN6webrtc10RtpDemuxerC1ERKS0_'/>
<fun r='_ZN6webrtc10RtpDemuxeraSERKS0_'/>
<fun r='_ZN6webrtc10RtpDemuxer7AddSinkERKNS_18RtpDemuxerCriteriaEPNS_22RtpPacketSinkInterfaceE'/>
<fun r='_ZN6webrtc10RtpDemuxer7AddSinkEjPNS_22RtpPacketSinkInterfaceE'/>
<fun r='_ZN6webrtc10RtpDemuxer7AddSinkERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPNS_22RtpPacketSinkInterfaceE'/>
<fun r='_ZN6webrtc10RtpDemuxer10RemoveSinkEPKNS_22RtpPacketSinkInterfaceE'/>
<fun r='_ZN6webrtc10RtpDemuxer11OnRtpPacketERKNS_17RtpPacketReceivedE'/>
<fun r='_ZNK6webrtc10RtpDemuxer21CriteriaWouldConflictERKNS_18RtpDemuxerCriteriaE'/>
<fun r='_ZN6webrtc10RtpDemuxer11ResolveSinkERKNS_17RtpPacketReceivedE'/>
<fun r='_ZN6webrtc10RtpDemuxer16ResolveSinkByMidERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj'/>
<fun r='_ZN6webrtc10RtpDemuxer20ResolveSinkByMidRsidERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_j'/>
<fun r='_ZN6webrtc10RtpDemuxer17ResolveSinkByRsidERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj'/>
<fun r='_ZN6webrtc10RtpDemuxer24ResolveSinkByPayloadTypeEhj'/>
<fun r='_ZN6webrtc10RtpDemuxer16RefreshKnownMidsEv'/>
<mbr r='webrtc::RtpDemuxer::sink_by_mid_' o='0' t='std::unordered_map&lt;std::string, RtpPacketSinkInterface *&gt;'/>
<mbr r='webrtc::RtpDemuxer::sink_by_ssrc_' o='320' t='std::unordered_map&lt;uint32_t, RtpPacketSinkInterface *&gt;'/>
<mbr r='webrtc::RtpDemuxer::sinks_by_pt_' o='640' t='std::unordered_multimap&lt;uint8_t, RtpPacketSinkInterface *&gt;'/>
<mbr r='webrtc::RtpDemuxer::sink_by_mid_and_rsid_' o='960' t='std::unordered_map&lt;std::pair&lt;std::string, std::string&gt;, RtpPacketSinkInterface *, webrtc::PairHash&gt;'/>
<mbr r='webrtc::RtpDemuxer::sink_by_rsid_' o='1280' t='std::unordered_map&lt;std::string, RtpPacketSinkInterface *&gt;'/>
<mbr r='webrtc::RtpDemuxer::known_mids_' o='1600' t='std::set&lt;std::string&gt;'/>
<mbr r='webrtc::RtpDemuxer::mid_by_ssrc_' o='1792' t='std::unordered_map&lt;uint32_t, std::string&gt;'/>
<mbr r='webrtc::RtpDemuxer::rsid_by_ssrc_' o='2112' t='std::unordered_map&lt;uint32_t, std::string&gt;'/>
<fun r='_ZN6webrtc10RtpDemuxer18AddSsrcSinkBindingEjPNS_22RtpPacketSinkInterfaceE'/>
<mbr r='webrtc::RtpDemuxer::use_mid_' o='2432' t='const bool'/>
