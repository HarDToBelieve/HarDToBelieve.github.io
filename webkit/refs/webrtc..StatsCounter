<def f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='81' ll='140'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='152' c='webrtc::AvgCounter'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='152'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='176' c='webrtc::MaxCounter'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='176'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='198' c='webrtc::PercentCounter'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='198'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='218' c='webrtc::PermilleCounter'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='218'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='243' c='webrtc::RateCounter'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='243'/>
<ovr f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='270' c='webrtc::RateAccCounter'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='270'/>
<size>88</size>
<doc f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.h' l='44'>// Classes which periodically computes a metric.
//
// During a period, |kProcessIntervalMs|, different metrics can be computed e.g:
// - |AvgCounter|: average of samples
// - |PercentCounter|: percentage of samples
// - |PermilleCounter|: permille of samples
//
// Each periodic metric can be either:
// - reported to an |observer| each period
// - aggregated during the call (e.g. min, max, average)
//
//                 periodically computed
//                    GetMetric()            GetMetric()   =&gt; AggregatedStats
//                        ^                      ^            (e.g. min/max/avg)
//                        |                      |
// |   *    *  *       *  |  **    *   * *     * | ...
// |&lt;- process interval -&gt;|
//
// (*) - samples
//
//
// Example usage:
//
// AvgCounter counter(&amp;clock, nullptr);
// counter.Add(5);
// counter.Add(1);
// counter.Add(6);   // process interval passed -&gt; GetMetric() avg:4
// counter.Add(7);
// counter.Add(3);   // process interval passed -&gt; GetMetric() avg:5
// counter.Add(10);
// counter.Add(20);  // process interval passed -&gt; GetMetric() avg:15
// AggregatedStats stats = counter.GetStats();
// stats: {min:4, max:15, avg:8}
//

// Note: StatsCounter takes ownership of |observer|.</doc>
<fun r='_ZN6webrtc12StatsCounterD1Ev'/>
<fun r='_ZNK6webrtc12StatsCounter9GetMetricEPi'/>
<fun r='_ZNK6webrtc12StatsCounter24GetValueForEmptyIntervalEv'/>
<fun r='_ZN6webrtc12StatsCounter8GetStatsEv'/>
<fun r='_ZN6webrtc12StatsCounter18ProcessAndGetStatsEv'/>
<fun r='_ZN6webrtc12StatsCounter15ProcessAndPauseEv'/>
<fun r='_ZN6webrtc12StatsCounter26ProcessAndPauseForDurationEx'/>
<fun r='_ZN6webrtc12StatsCounter19ProcessAndStopPauseEv'/>
<fun r='_ZNK6webrtc12StatsCounter9HasSampleEv'/>
<fun r='_ZN6webrtc12StatsCounterC1EPNS_5ClockExbPNS_20StatsCounterObserverE'/>
<fun r='_ZN6webrtc12StatsCounter3AddEi'/>
<fun r='_ZN6webrtc12StatsCounter3SetExj'/>
<fun r='_ZN6webrtc12StatsCounter7SetLastExj'/>
<mbr r='webrtc::StatsCounter::include_empty_intervals_' o='64' t='const bool'/>
<mbr r='webrtc::StatsCounter::process_intervals_ms_' o='128' t='const int64_t'/>
<mbr r='webrtc::StatsCounter::aggregated_counter_' o='192' t='const std::unique_ptr&lt;AggregatedCounter&gt;'/>
<mbr r='webrtc::StatsCounter::samples_' o='256' t='const std::unique_ptr&lt;Samples&gt;'/>
<fun r='_ZN6webrtc12StatsCounter13TimeToProcessEPi'/>
<fun r='_ZN6webrtc12StatsCounter10TryProcessEv'/>
<fun r='_ZNK6webrtc12StatsCounter31ReportMetricToAggregatedCounterEii'/>
<fun r='_ZNK6webrtc12StatsCounter21IncludeEmptyIntervalsEv'/>
<fun r='_ZN6webrtc12StatsCounter6ResumeEv'/>
<fun r='_ZN6webrtc12StatsCounter21ResumeIfMinTimePassedEv'/>
<mbr r='webrtc::StatsCounter::clock_' o='320' t='webrtc::Clock *const'/>
<mbr r='webrtc::StatsCounter::observer_' o='384' t='const std::unique_ptr&lt;StatsCounterObserver&gt;'/>
<mbr r='webrtc::StatsCounter::last_process_time_ms_' o='448' t='int64_t'/>
<mbr r='webrtc::StatsCounter::paused_' o='512' t='bool'/>
<mbr r='webrtc::StatsCounter::pause_time_ms_' o='576' t='int64_t'/>
<mbr r='webrtc::StatsCounter::min_pause_time_ms_' o='640' t='int64_t'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.cc' l='314' c='_ZN6webrtc10AvgCounterC1EPNS_5ClockEPNS_20StatsCounterObserverEb'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.cc' l='339' c='_ZN6webrtc10MaxCounterC1EPNS_5ClockEPNS_20StatsCounterObserverEx'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.cc' l='362' c='_ZN6webrtc14PercentCounterC1EPNS_5ClockEPNS_20StatsCounterObserverE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.cc' l='386' c='_ZN6webrtc15PermilleCounterC1EPNS_5ClockEPNS_20StatsCounterObserverE'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.cc' l='412' c='_ZN6webrtc11RateCounterC1EPNS_5ClockEPNS_20StatsCounterObserverEb'/>
<use f='webkit/Source/ThirdParty/libwebrtc/Source/webrtc/video/stats_counter.cc' l='437' c='_ZN6webrtc14RateAccCounterC1EPNS_5ClockEPNS_20StatsCounterObserverEb'/>
<size>88</size>
<fun r='_ZN6webrtc12StatsCounterC1EPNS_5ClockExbPNS_20StatsCounterObserverE'/>
<fun r='_ZN6webrtc12StatsCounterD1Ev'/>
<fun r='_ZN6webrtc12StatsCounter8GetStatsEv'/>
<fun r='_ZN6webrtc12StatsCounter18ProcessAndGetStatsEv'/>
<fun r='_ZN6webrtc12StatsCounter26ProcessAndPauseForDurationEx'/>
<fun r='_ZN6webrtc12StatsCounter15ProcessAndPauseEv'/>
<fun r='_ZN6webrtc12StatsCounter19ProcessAndStopPauseEv'/>
<fun r='_ZNK6webrtc12StatsCounter9HasSampleEv'/>
<fun r='_ZN6webrtc12StatsCounter13TimeToProcessEPi'/>
<fun r='_ZN6webrtc12StatsCounter3AddEi'/>
<fun r='_ZN6webrtc12StatsCounter3SetExj'/>
<fun r='_ZN6webrtc12StatsCounter7SetLastExj'/>
<fun r='_ZNK6webrtc12StatsCounter31ReportMetricToAggregatedCounterEii'/>
<fun r='_ZN6webrtc12StatsCounter10TryProcessEv'/>
<fun r='_ZNK6webrtc12StatsCounter21IncludeEmptyIntervalsEv'/>
<fun r='_ZN6webrtc12StatsCounter21ResumeIfMinTimePassedEv'/>
<fun r='_ZN6webrtc12StatsCounter6ResumeEv'/>
